//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class WorkProfile
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual byte WeekStartNr
        {
            get { return _weekStartNr; }
            set { _weekStartNr = value; }
        }
        private byte _weekStartNr = 0;
    
        public virtual byte SaturdayBusinessStateNr
        {
            get { return _saturdayBusinessStateNr; }
            set { _saturdayBusinessStateNr = value; }
        }
        private byte _saturdayBusinessStateNr = 0;
    
        public virtual byte SundayBusinessStateNr
        {
            get { return _sundayBusinessStateNr; }
            set { _sundayBusinessStateNr = value; }
        }
        private byte _sundayBusinessStateNr = 0;
    
        public virtual byte MondayBusinessStateNr
        {
            get { return _mondayBusinessStateNr; }
            set { _mondayBusinessStateNr = value; }
        }
        private byte _mondayBusinessStateNr = 0;
    
        public virtual byte TuesdayBusinessStateNr
        {
            get { return _tuesdayBusinessStateNr; }
            set { _tuesdayBusinessStateNr = value; }
        }
        private byte _tuesdayBusinessStateNr = 0;
    
        public virtual byte WednesdayBusinessStateNr
        {
            get { return _wednesdayBusinessStateNr; }
            set { _wednesdayBusinessStateNr = value; }
        }
        private byte _wednesdayBusinessStateNr = 0;
    
        public virtual byte ThursdayBusinessStateNr
        {
            get { return _thursdayBusinessStateNr; }
            set { _thursdayBusinessStateNr = value; }
        }
        private byte _thursdayBusinessStateNr = 1;
    
        public virtual byte FridayBusinessStateNr
        {
            get { return _fridayBusinessStateNr; }
            set { _fridayBusinessStateNr = value; }
        }
        private byte _fridayBusinessStateNr = 2;
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<WorkDay> WorkDays
        {
            get
            {
                if (_workDays == null)
                {
                    var newCollection = new FixupCollection<WorkDay>();
                    newCollection.CollectionChanged += FixupWorkDays;
                    _workDays = newCollection;
                }
                return _workDays;
            }
            set
            {
                if (!ReferenceEquals(_workDays, value))
                {
                    var previousValue = _workDays as FixupCollection<WorkDay>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWorkDays;
                    }
                    _workDays = value;
                    var newValue = value as FixupCollection<WorkDay>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWorkDays;
                    }
                }
            }
        }
        private ICollection<WorkDay> _workDays;
    
        public virtual ICollection<WorkProfilePlan> WorkProfilePlans
        {
            get
            {
                if (_workProfilePlans == null)
                {
                    var newCollection = new FixupCollection<WorkProfilePlan>();
                    newCollection.CollectionChanged += FixupWorkProfilePlans;
                    _workProfilePlans = newCollection;
                }
                return _workProfilePlans;
            }
            set
            {
                if (!ReferenceEquals(_workProfilePlans, value))
                {
                    var previousValue = _workProfilePlans as FixupCollection<WorkProfilePlan>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWorkProfilePlans;
                    }
                    _workProfilePlans = value;
                    var newValue = value as FixupCollection<WorkProfilePlan>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWorkProfilePlans;
                    }
                }
            }
        }
        private ICollection<WorkProfilePlan> _workProfilePlans;
    
        public virtual ICollection<WorkShiftPrototype> WorkShiftPrototypes
        {
            get
            {
                if (_workShiftPrototypes == null)
                {
                    var newCollection = new FixupCollection<WorkShiftPrototype>();
                    newCollection.CollectionChanged += FixupWorkShiftPrototypes;
                    _workShiftPrototypes = newCollection;
                }
                return _workShiftPrototypes;
            }
            set
            {
                if (!ReferenceEquals(_workShiftPrototypes, value))
                {
                    var previousValue = _workShiftPrototypes as FixupCollection<WorkShiftPrototype>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWorkShiftPrototypes;
                    }
                    _workShiftPrototypes = value;
                    var newValue = value as FixupCollection<WorkShiftPrototype>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWorkShiftPrototypes;
                    }
                }
            }
        }
        private ICollection<WorkShiftPrototype> _workShiftPrototypes;

        #endregion

        #region Association Fixup
    
        private void FixupWorkDays(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (WorkDay item in e.NewItems)
                {
                    item.WorkProfile = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkDay item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkProfile, this))
                    {
                        item.WorkProfile = null;
                    }
                }
            }
        }
    
        private void FixupWorkProfilePlans(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (WorkProfilePlan item in e.NewItems)
                {
                    item.WorkProfile = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkProfilePlan item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkProfile, this))
                    {
                        item.WorkProfile = null;
                    }
                }
            }
        }
    
        private void FixupWorkShiftPrototypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (WorkShiftPrototype item in e.NewItems)
                {
                    item.WorkProfile = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkShiftPrototype item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkProfile, this))
                    {
                        item.WorkProfile = null;
                    }
                }
            }
        }

        #endregion

    }
}

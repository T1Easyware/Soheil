//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class Position_AccessRule
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual Nullable<byte> Type
        {
            get;
            set;
        }
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Position Position
        {
            get { return _position; }
            set
            {
                if (!ReferenceEquals(_position, value))
                {
                    var previousValue = _position;
                    _position = value;
                    FixupPosition(previousValue);
                }
            }
        }
        private Position _position;
    
        public virtual AccessRule AccessRule
        {
            get { return _accessRule; }
            set
            {
                if (!ReferenceEquals(_accessRule, value))
                {
                    var previousValue = _accessRule;
                    _accessRule = value;
                    FixupAccessRule(previousValue);
                }
            }
        }
        private AccessRule _accessRule;

        #endregion

        #region Association Fixup
    
        private void FixupPosition(Position previousValue)
        {
            if (previousValue != null && previousValue.Position_AccessRules.Contains(this))
            {
                previousValue.Position_AccessRules.Remove(this);
            }
    
            if (Position != null)
            {
                if (!Position.Position_AccessRules.Contains(this))
                {
                    Position.Position_AccessRules.Add(this);
                }
            }
        }
    
        private void FixupAccessRule(AccessRule previousValue)
        {
            if (previousValue != null && previousValue.Position_AccessRules.Contains(this))
            {
                previousValue.Position_AccessRules.Remove(this);
            }
    
            if (AccessRule != null)
            {
                if (!AccessRule.Position_AccessRules.Contains(this))
                {
                    AccessRule.Position_AccessRules.Add(this);
                }
            }
        }

        #endregion

    }
}

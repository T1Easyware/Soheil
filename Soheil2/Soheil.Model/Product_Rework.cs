//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class Product_Rework
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        private byte Status
        {
            get { return _status; }
            set { _status = value; }
        }
        private byte _status = 1;
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Product Product
        {
            get { return _product; }
            set
            {
                if (!ReferenceEquals(_product, value))
                {
                    var previousValue = _product;
                    _product = value;
                    FixupProduct(previousValue);
                }
            }
        }
        private Product _product;
    
        public virtual Rework Rework
        {
            get { return _rework; }
            set
            {
                if (!ReferenceEquals(_rework, value))
                {
                    var previousValue = _rework;
                    _rework = value;
                    FixupRework(previousValue);
                }
            }
        }
        private Rework _rework;
    
        public virtual ICollection<Changeover> ChangeoverSources
        {
            get
            {
                if (_changeoverSources == null)
                {
                    var newCollection = new FixupCollection<Changeover>();
                    newCollection.CollectionChanged += FixupChangeoverSources;
                    _changeoverSources = newCollection;
                }
                return _changeoverSources;
            }
            set
            {
                if (!ReferenceEquals(_changeoverSources, value))
                {
                    var previousValue = _changeoverSources as FixupCollection<Changeover>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChangeoverSources;
                    }
                    _changeoverSources = value;
                    var newValue = value as FixupCollection<Changeover>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChangeoverSources;
                    }
                }
            }
        }
        private ICollection<Changeover> _changeoverSources;
    
        public virtual ICollection<Warmup> Warmups
        {
            get
            {
                if (_warmups == null)
                {
                    var newCollection = new FixupCollection<Warmup>();
                    newCollection.CollectionChanged += FixupWarmups;
                    _warmups = newCollection;
                }
                return _warmups;
            }
            set
            {
                if (!ReferenceEquals(_warmups, value))
                {
                    var previousValue = _warmups as FixupCollection<Warmup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWarmups;
                    }
                    _warmups = value;
                    var newValue = value as FixupCollection<Warmup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWarmups;
                    }
                }
            }
        }
        private ICollection<Warmup> _warmups;
    
        public virtual ICollection<Job> Jobs
        {
            get
            {
                if (_jobs == null)
                {
                    var newCollection = new FixupCollection<Job>();
                    newCollection.CollectionChanged += FixupJobs;
                    _jobs = newCollection;
                }
                return _jobs;
            }
            set
            {
                if (!ReferenceEquals(_jobs, value))
                {
                    var previousValue = _jobs as FixupCollection<Job>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobs;
                    }
                    _jobs = value;
                    var newValue = value as FixupCollection<Job>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobs;
                    }
                }
            }
        }
        private ICollection<Job> _jobs;
    
        public virtual ICollection<State> States
        {
            get
            {
                if (_states == null)
                {
                    var newCollection = new FixupCollection<State>();
                    newCollection.CollectionChanged += FixupStates;
                    _states = newCollection;
                }
                return _states;
            }
            set
            {
                if (!ReferenceEquals(_states, value))
                {
                    var previousValue = _states as FixupCollection<State>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStates;
                    }
                    _states = value;
                    var newValue = value as FixupCollection<State>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStates;
                    }
                }
            }
        }
        private ICollection<State> _states;
    
        public virtual ICollection<Changeover> ChangeoverTargets
        {
            get
            {
                if (_changeoverTargets == null)
                {
                    var newCollection = new FixupCollection<Changeover>();
                    newCollection.CollectionChanged += FixupChangeoverTargets;
                    _changeoverTargets = newCollection;
                }
                return _changeoverTargets;
            }
            set
            {
                if (!ReferenceEquals(_changeoverTargets, value))
                {
                    var previousValue = _changeoverTargets as FixupCollection<Changeover>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChangeoverTargets;
                    }
                    _changeoverTargets = value;
                    var newValue = value as FixupCollection<Changeover>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChangeoverTargets;
                    }
                }
            }
        }
        private ICollection<Changeover> _changeoverTargets;

        #endregion

        #region Association Fixup
    
        private void FixupProduct(Product previousValue)
        {
            if (previousValue != null && previousValue.Product_Rework.Contains(this))
            {
                previousValue.Product_Rework.Remove(this);
            }
    
            if (Product != null)
            {
                if (!Product.Product_Rework.Contains(this))
                {
                    Product.Product_Rework.Add(this);
                }
            }
        }
    
        private void FixupRework(Rework previousValue)
        {
            if (previousValue != null && previousValue.Product_Rework.Contains(this))
            {
                previousValue.Product_Rework.Remove(this);
            }
    
            if (Rework != null)
            {
                if (!Rework.Product_Rework.Contains(this))
                {
                    Rework.Product_Rework.Add(this);
                }
            }
        }
    
        private void FixupChangeoverSources(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Changeover item in e.NewItems)
                {
                    item.FromProduct_Rework = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Changeover item in e.OldItems)
                {
                    if (ReferenceEquals(item.FromProduct_Rework, this))
                    {
                        item.FromProduct_Rework = null;
                    }
                }
            }
        }
    
        private void FixupWarmups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Warmup item in e.NewItems)
                {
                    item.Product_Rework = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Warmup item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product_Rework, this))
                    {
                        item.Product_Rework = null;
                    }
                }
            }
        }
    
        private void FixupJobs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Job item in e.NewItems)
                {
                    item.Product_Rework = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Job item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product_Rework, this))
                    {
                        item.Product_Rework = null;
                    }
                }
            }
        }
    
        private void FixupStates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (State item in e.NewItems)
                {
                    item.OnProductRework = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (State item in e.OldItems)
                {
                    if (ReferenceEquals(item.OnProductRework, this))
                    {
                        item.OnProductRework = null;
                    }
                }
            }
        }
    
        private void FixupChangeoverTargets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Changeover item in e.NewItems)
                {
                    item.ToProduct_Rework = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Changeover item in e.OldItems)
                {
                    if (ReferenceEquals(item.ToProduct_Rework, this))
                    {
                        item.ToProduct_Rework = null;
                    }
                }
            }
        }

        #endregion

    }
}

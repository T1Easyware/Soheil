//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class RawMaterialUnitGroup
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual RawMaterial RawMaterial
        {
            get { return _rawMaterial; }
            set
            {
                if (!ReferenceEquals(_rawMaterial, value))
                {
                    var previousValue = _rawMaterial;
                    _rawMaterial = value;
                    FixupRawMaterial(previousValue);
                }
            }
        }
        private RawMaterial _rawMaterial;
    
        public virtual UnitGroup UnitGroup
        {
            get { return _unitGroup; }
            set
            {
                if (!ReferenceEquals(_unitGroup, value))
                {
                    var previousValue = _unitGroup;
                    _unitGroup = value;
                    FixupUnitGroup(previousValue);
                }
            }
        }
        private UnitGroup _unitGroup;

        #endregion

        #region Association Fixup
    
        private void FixupRawMaterial(RawMaterial previousValue)
        {
            if (previousValue != null && previousValue.RawMaterialUnitGroups.Contains(this))
            {
                previousValue.RawMaterialUnitGroups.Remove(this);
            }
    
            if (RawMaterial != null)
            {
                if (!RawMaterial.RawMaterialUnitGroups.Contains(this))
                {
                    RawMaterial.RawMaterialUnitGroups.Add(this);
                }
            }
        }
    
        private void FixupUnitGroup(UnitGroup previousValue)
        {
            if (previousValue != null && previousValue.RawMaterialUnitGroups.Contains(this))
            {
                previousValue.RawMaterialUnitGroups.Remove(this);
            }
    
            if (UnitGroup != null)
            {
                if (!UnitGroup.RawMaterialUnitGroups.Contains(this))
                {
                    UnitGroup.RawMaterialUnitGroups.Add(this);
                }
            }
        }

        #endregion

    }
}

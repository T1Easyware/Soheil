//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class AccessRule
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<User_AccessRule> User_AccessRules
        {
            get
            {
                if (_user_AccessRules == null)
                {
                    var newCollection = new FixupCollection<User_AccessRule>();
                    newCollection.CollectionChanged += FixupUser_AccessRules;
                    _user_AccessRules = newCollection;
                }
                return _user_AccessRules;
            }
            set
            {
                if (!ReferenceEquals(_user_AccessRules, value))
                {
                    var previousValue = _user_AccessRules as FixupCollection<User_AccessRule>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUser_AccessRules;
                    }
                    _user_AccessRules = value;
                    var newValue = value as FixupCollection<User_AccessRule>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUser_AccessRules;
                    }
                }
            }
        }
        private ICollection<User_AccessRule> _user_AccessRules;
    
        public virtual ICollection<Position_AccessRule> Position_AccessRules
        {
            get
            {
                if (_position_AccessRules == null)
                {
                    var newCollection = new FixupCollection<Position_AccessRule>();
                    newCollection.CollectionChanged += FixupPosition_AccessRules;
                    _position_AccessRules = newCollection;
                }
                return _position_AccessRules;
            }
            set
            {
                if (!ReferenceEquals(_position_AccessRules, value))
                {
                    var previousValue = _position_AccessRules as FixupCollection<Position_AccessRule>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPosition_AccessRules;
                    }
                    _position_AccessRules = value;
                    var newValue = value as FixupCollection<Position_AccessRule>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPosition_AccessRules;
                    }
                }
            }
        }
        private ICollection<Position_AccessRule> _position_AccessRules;
    
        public virtual ICollection<AccessRule> Children
        {
            get
            {
                if (_children == null)
                {
                    var newCollection = new FixupCollection<AccessRule>();
                    newCollection.CollectionChanged += FixupChildren;
                    _children = newCollection;
                }
                return _children;
            }
            set
            {
                if (!ReferenceEquals(_children, value))
                {
                    var previousValue = _children as FixupCollection<AccessRule>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildren;
                    }
                    _children = value;
                    var newValue = value as FixupCollection<AccessRule>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildren;
                    }
                }
            }
        }
        private ICollection<AccessRule> _children;
    
        public virtual AccessRule Parent
        {
            get { return _parent; }
            set
            {
                if (!ReferenceEquals(_parent, value))
                {
                    var previousValue = _parent;
                    _parent = value;
                    FixupParent(previousValue);
                }
            }
        }
        private AccessRule _parent;

        #endregion

        #region Association Fixup
    
        private void FixupParent(AccessRule previousValue)
        {
            if (previousValue != null && previousValue.Children.Contains(this))
            {
                previousValue.Children.Remove(this);
            }
    
            if (Parent != null)
            {
                if (!Parent.Children.Contains(this))
                {
                    Parent.Children.Add(this);
                }
            }
        }
    
        private void FixupUser_AccessRules(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User_AccessRule item in e.NewItems)
                {
                    item.AccessRule = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User_AccessRule item in e.OldItems)
                {
                    if (ReferenceEquals(item.AccessRule, this))
                    {
                        item.AccessRule = null;
                    }
                }
            }
        }
    
        private void FixupPosition_AccessRules(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Position_AccessRule item in e.NewItems)
                {
                    item.AccessRule = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Position_AccessRule item in e.OldItems)
                {
                    if (ReferenceEquals(item.AccessRule, this))
                    {
                        item.AccessRule = null;
                    }
                }
            }
        }
    
        private void FixupChildren(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AccessRule item in e.NewItems)
                {
                    item.Parent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AccessRule item in e.OldItems)
                {
                    if (ReferenceEquals(item.Parent, this))
                    {
                        item.Parent = null;
                    }
                }
            }
        }

        #endregion

    }
}

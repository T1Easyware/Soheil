//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class MachinePartMaintenance
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual bool IsOnDemand
        {
            get;
            set;
        }
    
        public virtual int PeriodDays
        {
            get { return _periodDays; }
            set { _periodDays = value; }
        }
        private int _periodDays = 720;
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }
    
        public virtual byte Status
        {
            get { return _status; }
            set { _status = value; }
        }
        private byte _status = 1;
    
        public virtual Nullable<System.DateTime> LastMaintenanceDate
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Maintenance Maintenance
        {
            get { return _maintenance; }
            set
            {
                if (!ReferenceEquals(_maintenance, value))
                {
                    var previousValue = _maintenance;
                    _maintenance = value;
                    FixupMaintenance(previousValue);
                }
            }
        }
        private Maintenance _maintenance;
    
        public virtual MachinePart MachinePart
        {
            get { return _machinePart; }
            set
            {
                if (!ReferenceEquals(_machinePart, value))
                {
                    var previousValue = _machinePart;
                    _machinePart = value;
                    FixupMachinePart(previousValue);
                }
            }
        }
        private MachinePart _machinePart;
    
        public virtual ICollection<MaintenanceReport> MaintenanceReports
        {
            get
            {
                if (_maintenanceReports == null)
                {
                    var newCollection = new FixupCollection<MaintenanceReport>();
                    newCollection.CollectionChanged += FixupMaintenanceReports;
                    _maintenanceReports = newCollection;
                }
                return _maintenanceReports;
            }
            set
            {
                if (!ReferenceEquals(_maintenanceReports, value))
                {
                    var previousValue = _maintenanceReports as FixupCollection<MaintenanceReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMaintenanceReports;
                    }
                    _maintenanceReports = value;
                    var newValue = value as FixupCollection<MaintenanceReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMaintenanceReports;
                    }
                }
            }
        }
        private ICollection<MaintenanceReport> _maintenanceReports;

        #endregion

        #region Association Fixup
    
        private void FixupMaintenance(Maintenance previousValue)
        {
            if (previousValue != null && previousValue.MachinePartMaintenances.Contains(this))
            {
                previousValue.MachinePartMaintenances.Remove(this);
            }
    
            if (Maintenance != null)
            {
                if (!Maintenance.MachinePartMaintenances.Contains(this))
                {
                    Maintenance.MachinePartMaintenances.Add(this);
                }
            }
        }
    
        private void FixupMachinePart(MachinePart previousValue)
        {
            if (previousValue != null && previousValue.MachinePartMaintenances.Contains(this))
            {
                previousValue.MachinePartMaintenances.Remove(this);
            }
    
            if (MachinePart != null)
            {
                if (!MachinePart.MachinePartMaintenances.Contains(this))
                {
                    MachinePart.MachinePartMaintenances.Add(this);
                }
            }
        }
    
        private void FixupMaintenanceReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MaintenanceReport item in e.NewItems)
                {
                    item.MachinePartMaintenance = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MaintenanceReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.MachinePartMaintenance, this))
                    {
                        item.MachinePartMaintenance = null;
                    }
                }
            }
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class MachinePart
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual bool IsMachine
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual byte Status
        {
            get { return _status; }
            set { _status = value; }
        }
        private byte _status = 1;
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Part Part
        {
            get { return _part; }
            set
            {
                if (!ReferenceEquals(_part, value))
                {
                    var previousValue = _part;
                    _part = value;
                    FixupPart(previousValue);
                }
            }
        }
        private Part _part;
    
        public virtual ICollection<MachinePartMaintenance> MachinePartMaintenances
        {
            get
            {
                if (_machinePartMaintenances == null)
                {
                    var newCollection = new FixupCollection<MachinePartMaintenance>();
                    newCollection.CollectionChanged += FixupMachinePartMaintenances;
                    _machinePartMaintenances = newCollection;
                }
                return _machinePartMaintenances;
            }
            set
            {
                if (!ReferenceEquals(_machinePartMaintenances, value))
                {
                    var previousValue = _machinePartMaintenances as FixupCollection<MachinePartMaintenance>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMachinePartMaintenances;
                    }
                    _machinePartMaintenances = value;
                    var newValue = value as FixupCollection<MachinePartMaintenance>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMachinePartMaintenances;
                    }
                }
            }
        }
        private ICollection<MachinePartMaintenance> _machinePartMaintenances;
    
        public virtual Machine Machine
        {
            get { return _machine; }
            set
            {
                if (!ReferenceEquals(_machine, value))
                {
                    var previousValue = _machine;
                    _machine = value;
                    FixupMachine(previousValue);
                }
            }
        }
        private Machine _machine;
    
        public virtual ICollection<Repair> Repairs
        {
            get
            {
                if (_repairs == null)
                {
                    var newCollection = new FixupCollection<Repair>();
                    newCollection.CollectionChanged += FixupRepairs;
                    _repairs = newCollection;
                }
                return _repairs;
            }
            set
            {
                if (!ReferenceEquals(_repairs, value))
                {
                    var previousValue = _repairs as FixupCollection<Repair>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRepairs;
                    }
                    _repairs = value;
                    var newValue = value as FixupCollection<Repair>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRepairs;
                    }
                }
            }
        }
        private ICollection<Repair> _repairs;

        #endregion

        #region Association Fixup
    
        private void FixupPart(Part previousValue)
        {
            if (previousValue != null && previousValue.MachineParts.Contains(this))
            {
                previousValue.MachineParts.Remove(this);
            }
    
            if (Part != null)
            {
                if (!Part.MachineParts.Contains(this))
                {
                    Part.MachineParts.Add(this);
                }
            }
        }
    
        private void FixupMachine(Machine previousValue)
        {
            if (previousValue != null && previousValue.MachineParts.Contains(this))
            {
                previousValue.MachineParts.Remove(this);
            }
    
            if (Machine != null)
            {
                if (!Machine.MachineParts.Contains(this))
                {
                    Machine.MachineParts.Add(this);
                }
            }
        }
    
        private void FixupMachinePartMaintenances(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MachinePartMaintenance item in e.NewItems)
                {
                    item.MachinePart = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MachinePartMaintenance item in e.OldItems)
                {
                    if (ReferenceEquals(item.MachinePart, this))
                    {
                        item.MachinePart = null;
                    }
                }
            }
        }
    
        private void FixupRepairs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Repair item in e.NewItems)
                {
                    item.MachinePart = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Repair item in e.OldItems)
                {
                    if (ReferenceEquals(item.MachinePart, this))
                    {
                        item.MachinePart = null;
                    }
                }
            }
        }

        #endregion

    }
}

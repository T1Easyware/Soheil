//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class RawMaterial
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual double Inventory
        {
            get;
            set;
        }
    
        public virtual int SafetyStock
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }
    
        public virtual byte Status
        {
            get { return _status; }
            set { _status = value; }
        }
        private byte _status = 1;
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<WarehouseTransaction> WarehouseTransactions
        {
            get
            {
                if (_warehouseTransactions == null)
                {
                    var newCollection = new FixupCollection<WarehouseTransaction>();
                    newCollection.CollectionChanged += FixupWarehouseTransactions;
                    _warehouseTransactions = newCollection;
                }
                return _warehouseTransactions;
            }
            set
            {
                if (!ReferenceEquals(_warehouseTransactions, value))
                {
                    var previousValue = _warehouseTransactions as FixupCollection<WarehouseTransaction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWarehouseTransactions;
                    }
                    _warehouseTransactions = value;
                    var newValue = value as FixupCollection<WarehouseTransaction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWarehouseTransactions;
                    }
                }
            }
        }
        private ICollection<WarehouseTransaction> _warehouseTransactions;
    
        public virtual ICollection<BOM> BOMs
        {
            get
            {
                if (_bOMs == null)
                {
                    var newCollection = new FixupCollection<BOM>();
                    newCollection.CollectionChanged += FixupBOMs;
                    _bOMs = newCollection;
                }
                return _bOMs;
            }
            set
            {
                if (!ReferenceEquals(_bOMs, value))
                {
                    var previousValue = _bOMs as FixupCollection<BOM>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBOMs;
                    }
                    _bOMs = value;
                    var newValue = value as FixupCollection<BOM>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBOMs;
                    }
                }
            }
        }
        private ICollection<BOM> _bOMs;
    
        public virtual UnitGroup UnitGroup
        {
            get { return _unitGroup; }
            set
            {
                if (!ReferenceEquals(_unitGroup, value))
                {
                    var previousValue = _unitGroup;
                    _unitGroup = value;
                    FixupUnitGroup(previousValue);
                }
            }
        }
        private UnitGroup _unitGroup;

        #endregion

        #region Association Fixup
    
        private void FixupUnitGroup(UnitGroup previousValue)
        {
            if (previousValue != null && previousValue.RawMaterials.Contains(this))
            {
                previousValue.RawMaterials.Remove(this);
            }
    
            if (UnitGroup != null)
            {
                if (!UnitGroup.RawMaterials.Contains(this))
                {
                    UnitGroup.RawMaterials.Add(this);
                }
            }
        }
    
        private void FixupWarehouseTransactions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (WarehouseTransaction item in e.NewItems)
                {
                    item.RawMaterial = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WarehouseTransaction item in e.OldItems)
                {
                    if (ReferenceEquals(item.RawMaterial, this))
                    {
                        item.RawMaterial = null;
                    }
                }
            }
        }
    
        private void FixupBOMs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (BOM item in e.NewItems)
                {
                    item.RawMaterial = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BOM item in e.OldItems)
                {
                    if (ReferenceEquals(item.RawMaterial, this))
                    {
                        item.RawMaterial = null;
                    }
                }
            }
        }

        #endregion

    }
}

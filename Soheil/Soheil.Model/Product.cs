//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class Product
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual byte Status
        {
            get { return _status; }
            set { _status = value; }
        }
        private byte _status = 1;
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }
    
        public virtual int ColorNumber
        {
            get;
            set;
        }
    
        public virtual int AltColorNumber
        {
            get { return _altColorNumber; }
            set { _altColorNumber = value; }
        }
        private int _altColorNumber = 0;

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<ProductDefection> ProductDefections
        {
            get
            {
                if (_productDefections == null)
                {
                    var newCollection = new FixupCollection<ProductDefection>();
                    newCollection.CollectionChanged += FixupProductDefections;
                    _productDefections = newCollection;
                }
                return _productDefections;
            }
            set
            {
                if (!ReferenceEquals(_productDefections, value))
                {
                    var previousValue = _productDefections as FixupCollection<ProductDefection>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductDefections;
                    }
                    _productDefections = value;
                    var newValue = value as FixupCollection<ProductDefection>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductDefections;
                    }
                }
            }
        }
        private ICollection<ProductDefection> _productDefections;
    
        public virtual ProductGroup ProductGroup
        {
            get { return _productGroup; }
            set
            {
                if (!ReferenceEquals(_productGroup, value))
                {
                    var previousValue = _productGroup;
                    _productGroup = value;
                    FixupProductGroup(previousValue);
                }
            }
        }
        private ProductGroup _productGroup;
    
        public virtual ICollection<Product> Children
        {
            get
            {
                if (_children == null)
                {
                    var newCollection = new FixupCollection<Product>();
                    newCollection.CollectionChanged += FixupChildren;
                    _children = newCollection;
                }
                return _children;
            }
            set
            {
                if (!ReferenceEquals(_children, value))
                {
                    var previousValue = _children as FixupCollection<Product>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildren;
                    }
                    _children = value;
                    var newValue = value as FixupCollection<Product>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildren;
                    }
                }
            }
        }
        private ICollection<Product> _children;
    
        public virtual Product Parent
        {
            get { return _parent; }
            set
            {
                if (!ReferenceEquals(_parent, value))
                {
                    var previousValue = _parent;
                    _parent = value;
                    FixupParent(previousValue);
                }
            }
        }
        private Product _parent;
    
        public virtual ICollection<ProductRework> ProductReworks
        {
            get
            {
                if (_productReworks == null)
                {
                    var newCollection = new FixupCollection<ProductRework>();
                    newCollection.CollectionChanged += FixupProductReworks;
                    _productReworks = newCollection;
                }
                return _productReworks;
            }
            set
            {
                if (!ReferenceEquals(_productReworks, value))
                {
                    var previousValue = _productReworks as FixupCollection<ProductRework>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductReworks;
                    }
                    _productReworks = value;
                    var newValue = value as FixupCollection<ProductRework>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductReworks;
                    }
                }
            }
        }
        private ICollection<ProductRework> _productReworks;
    
        public virtual ICollection<FPC> FPCs
        {
            get
            {
                if (_fPCs == null)
                {
                    var newCollection = new FixupCollection<FPC>();
                    newCollection.CollectionChanged += FixupFPCs;
                    _fPCs = newCollection;
                }
                return _fPCs;
            }
            set
            {
                if (!ReferenceEquals(_fPCs, value))
                {
                    var previousValue = _fPCs as FixupCollection<FPC>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFPCs;
                    }
                    _fPCs = value;
                    var newValue = value as FixupCollection<FPC>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFPCs;
                    }
                }
            }
        }
        private ICollection<FPC> _fPCs;

        #endregion

        #region Association Fixup
    
        private void FixupProductGroup(ProductGroup previousValue)
        {
            if (previousValue != null && previousValue.Products.Contains(this))
            {
                previousValue.Products.Remove(this);
            }
    
            if (ProductGroup != null)
            {
                if (!ProductGroup.Products.Contains(this))
                {
                    ProductGroup.Products.Add(this);
                }
            }
        }
    
        private void FixupParent(Product previousValue)
        {
            if (previousValue != null && previousValue.Children.Contains(this))
            {
                previousValue.Children.Remove(this);
            }
    
            if (Parent != null)
            {
                if (!Parent.Children.Contains(this))
                {
                    Parent.Children.Add(this);
                }
            }
        }
    
        private void FixupProductDefections(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductDefection item in e.NewItems)
                {
                    item.Product = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductDefection item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                }
            }
        }
    
        private void FixupChildren(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Product item in e.NewItems)
                {
                    item.Parent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Product item in e.OldItems)
                {
                    if (ReferenceEquals(item.Parent, this))
                    {
                        item.Parent = null;
                    }
                }
            }
        }
    
        private void FixupProductReworks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductRework item in e.NewItems)
                {
                    item.Product = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductRework item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                }
            }
        }
    
        private void FixupFPCs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (FPC item in e.NewItems)
                {
                    item.Product = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FPC item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                }
            }
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class User_Position
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual Position Position
        {
            get { return _position; }
            set
            {
                if (!ReferenceEquals(_position, value))
                {
                    var previousValue = _position;
                    _position = value;
                    FixupPosition(previousValue);
                }
            }
        }
        private Position _position;

        #endregion

        #region Association Fixup
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.User_Positions.Contains(this))
            {
                previousValue.User_Positions.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.User_Positions.Contains(this))
                {
                    User.User_Positions.Add(this);
                }
            }
        }
    
        private void FixupPosition(Position previousValue)
        {
            if (previousValue != null && previousValue.User_Positions.Contains(this))
            {
                previousValue.User_Positions.Remove(this);
            }
    
            if (Position != null)
            {
                if (!Position.User_Positions.Contains(this))
                {
                    Position.User_Positions.Add(this);
                }
            }
        }

        #endregion

    }
}

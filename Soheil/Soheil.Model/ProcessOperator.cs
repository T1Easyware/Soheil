//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class ProcessOperator
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        private byte RoleNr
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Process Process
        {
            get { return _process; }
            set
            {
                if (!ReferenceEquals(_process, value))
                {
                    var previousValue = _process;
                    _process = value;
                    FixupProcess(previousValue);
                }
            }
        }
        private Process _process;
    
        public virtual Operator Operator
        {
            get { return _operator; }
            set
            {
                if (!ReferenceEquals(_operator, value))
                {
                    var previousValue = _operator;
                    _operator = value;
                    FixupOperator(previousValue);
                }
            }
        }
        private Operator _operator;
    
        public virtual ICollection<OperatorProcessReport> OperatorProcessReports
        {
            get
            {
                if (_operatorProcessReports == null)
                {
                    var newCollection = new FixupCollection<OperatorProcessReport>();
                    newCollection.CollectionChanged += FixupOperatorProcessReports;
                    _operatorProcessReports = newCollection;
                }
                return _operatorProcessReports;
            }
            set
            {
                if (!ReferenceEquals(_operatorProcessReports, value))
                {
                    var previousValue = _operatorProcessReports as FixupCollection<OperatorProcessReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOperatorProcessReports;
                    }
                    _operatorProcessReports = value;
                    var newValue = value as FixupCollection<OperatorProcessReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOperatorProcessReports;
                    }
                }
            }
        }
        private ICollection<OperatorProcessReport> _operatorProcessReports;

        #endregion

        #region Association Fixup
    
        private void FixupProcess(Process previousValue)
        {
            if (previousValue != null && previousValue.ProcessOperators.Contains(this))
            {
                previousValue.ProcessOperators.Remove(this);
            }
    
            if (Process != null)
            {
                if (!Process.ProcessOperators.Contains(this))
                {
                    Process.ProcessOperators.Add(this);
                }
            }
        }
    
        private void FixupOperator(Operator previousValue)
        {
            if (previousValue != null && previousValue.ProcessOperators.Contains(this))
            {
                previousValue.ProcessOperators.Remove(this);
            }
    
            if (Operator != null)
            {
                if (!Operator.ProcessOperators.Contains(this))
                {
                    Operator.ProcessOperators.Add(this);
                }
            }
        }
    
        private void FixupOperatorProcessReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OperatorProcessReport item in e.NewItems)
                {
                    item.ProcessOperator = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OperatorProcessReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProcessOperator, this))
                    {
                        item.ProcessOperator = null;
                    }
                }
            }
        }

        #endregion

    }
}

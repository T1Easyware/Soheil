//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class UnitConversion
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual long Factor
        {
            get;
            set;
        }
    
        public virtual byte Status
        {
            get { return _status; }
            set { _status = value; }
        }
        private byte _status = 1;
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual UnitSet MajorUnit
        {
            get { return _majorUnit; }
            set
            {
                if (!ReferenceEquals(_majorUnit, value))
                {
                    var previousValue = _majorUnit;
                    _majorUnit = value;
                    FixupMajorUnit(previousValue);
                }
            }
        }
        private UnitSet _majorUnit;
    
        public virtual UnitSet MinorUnit
        {
            get { return _minorUnit; }
            set
            {
                if (!ReferenceEquals(_minorUnit, value))
                {
                    var previousValue = _minorUnit;
                    _minorUnit = value;
                    FixupMinorUnit(previousValue);
                }
            }
        }
        private UnitSet _minorUnit;

        #endregion

        #region Association Fixup
    
        private void FixupMajorUnit(UnitSet previousValue)
        {
            if (previousValue != null && previousValue.MajorUnits.Contains(this))
            {
                previousValue.MajorUnits.Remove(this);
            }
    
            if (MajorUnit != null)
            {
                if (!MajorUnit.MajorUnits.Contains(this))
                {
                    MajorUnit.MajorUnits.Add(this);
                }
            }
        }
    
        private void FixupMinorUnit(UnitSet previousValue)
        {
            if (previousValue != null && previousValue.MinorUnits.Contains(this))
            {
                previousValue.MinorUnits.Remove(this);
            }
    
            if (MinorUnit != null)
            {
                if (!MinorUnit.MinorUnits.Contains(this))
                {
                    MinorUnit.MinorUnits.Add(this);
                }
            }
        }

        #endregion

    }
}

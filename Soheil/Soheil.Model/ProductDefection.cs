//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class ProductDefection
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Product Product
        {
            get { return _product; }
            set
            {
                if (!ReferenceEquals(_product, value))
                {
                    var previousValue = _product;
                    _product = value;
                    FixupProduct(previousValue);
                }
            }
        }
        private Product _product;
    
        public virtual Defection Defection
        {
            get { return _defection; }
            set
            {
                if (!ReferenceEquals(_defection, value))
                {
                    var previousValue = _defection;
                    _defection = value;
                    FixupDefection(previousValue);
                }
            }
        }
        private Defection _defection;
    
        public virtual ICollection<Root> Roots
        {
            get
            {
                if (_roots == null)
                {
                    var newCollection = new FixupCollection<Root>();
                    newCollection.CollectionChanged += FixupRoots;
                    _roots = newCollection;
                }
                return _roots;
            }
            set
            {
                if (!ReferenceEquals(_roots, value))
                {
                    var previousValue = _roots as FixupCollection<Root>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRoots;
                    }
                    _roots = value;
                    var newValue = value as FixupCollection<Root>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRoots;
                    }
                }
            }
        }
        private ICollection<Root> _roots;
    
        public virtual ICollection<DefectionReport> DefectionReports
        {
            get
            {
                if (_defectionReports == null)
                {
                    var newCollection = new FixupCollection<DefectionReport>();
                    newCollection.CollectionChanged += FixupDefectionReports;
                    _defectionReports = newCollection;
                }
                return _defectionReports;
            }
            set
            {
                if (!ReferenceEquals(_defectionReports, value))
                {
                    var previousValue = _defectionReports as FixupCollection<DefectionReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDefectionReports;
                    }
                    _defectionReports = value;
                    var newValue = value as FixupCollection<DefectionReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDefectionReports;
                    }
                }
            }
        }
        private ICollection<DefectionReport> _defectionReports;

        #endregion

        #region Association Fixup
    
        private void FixupProduct(Product previousValue)
        {
            if (previousValue != null && previousValue.ProductDefections.Contains(this))
            {
                previousValue.ProductDefections.Remove(this);
            }
    
            if (Product != null)
            {
                if (!Product.ProductDefections.Contains(this))
                {
                    Product.ProductDefections.Add(this);
                }
            }
        }
    
        private void FixupDefection(Defection previousValue)
        {
            if (previousValue != null && previousValue.ProductDefections.Contains(this))
            {
                previousValue.ProductDefections.Remove(this);
            }
    
            if (Defection != null)
            {
                if (!Defection.ProductDefections.Contains(this))
                {
                    Defection.ProductDefections.Add(this);
                }
            }
        }
    
        private void FixupRoots(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Root item in e.NewItems)
                {
                    item.ProductDefection = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Root item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProductDefection, this))
                    {
                        item.ProductDefection = null;
                    }
                }
            }
        }
    
        private void FixupDefectionReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DefectionReport item in e.NewItems)
                {
                    item.ProductDefection = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DefectionReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProductDefection, this))
                    {
                        item.ProductDefection = null;
                    }
                }
            }
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class Machine
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual byte Status
        {
            get { return _status; }
            set { _status = value; }
        }
        private byte _status = 1;
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }
    
        public virtual bool HasOEE
        {
            get { return _hasOEE; }
            set { _hasOEE = value; }
        }
        private bool _hasOEE = true;

        #endregion

        #region Navigation Properties
    
        public virtual MachineFamily MachineFamily
        {
            get { return _machineFamily; }
            set
            {
                if (!ReferenceEquals(_machineFamily, value))
                {
                    var previousValue = _machineFamily;
                    _machineFamily = value;
                    FixupMachineFamily(previousValue);
                }
            }
        }
        private MachineFamily _machineFamily;
    
        public virtual ICollection<StationMachine> StationMachines
        {
            get
            {
                if (_stationMachines == null)
                {
                    var newCollection = new FixupCollection<StationMachine>();
                    newCollection.CollectionChanged += FixupStationMachines;
                    _stationMachines = newCollection;
                }
                return _stationMachines;
            }
            set
            {
                if (!ReferenceEquals(_stationMachines, value))
                {
                    var previousValue = _stationMachines as FixupCollection<StationMachine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStationMachines;
                    }
                    _stationMachines = value;
                    var newValue = value as FixupCollection<StationMachine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStationMachines;
                    }
                }
            }
        }
        private ICollection<StationMachine> _stationMachines;
    
        public virtual ICollection<StateStationActivityMachine> StateStationActivityMachines
        {
            get
            {
                if (_stateStationActivityMachines == null)
                {
                    var newCollection = new FixupCollection<StateStationActivityMachine>();
                    newCollection.CollectionChanged += FixupStateStationActivityMachines;
                    _stateStationActivityMachines = newCollection;
                }
                return _stateStationActivityMachines;
            }
            set
            {
                if (!ReferenceEquals(_stateStationActivityMachines, value))
                {
                    var previousValue = _stateStationActivityMachines as FixupCollection<StateStationActivityMachine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStateStationActivityMachines;
                    }
                    _stateStationActivityMachines = value;
                    var newValue = value as FixupCollection<StateStationActivityMachine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStateStationActivityMachines;
                    }
                }
            }
        }
        private ICollection<StateStationActivityMachine> _stateStationActivityMachines;
    
        public virtual ICollection<Cost> Costs
        {
            get
            {
                if (_costs == null)
                {
                    var newCollection = new FixupCollection<Cost>();
                    newCollection.CollectionChanged += FixupCosts;
                    _costs = newCollection;
                }
                return _costs;
            }
            set
            {
                if (!ReferenceEquals(_costs, value))
                {
                    var previousValue = _costs as FixupCollection<Cost>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCosts;
                    }
                    _costs = value;
                    var newValue = value as FixupCollection<Cost>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCosts;
                    }
                }
            }
        }
        private ICollection<Cost> _costs;

        #endregion

        #region Association Fixup
    
        private void FixupMachineFamily(MachineFamily previousValue)
        {
            if (previousValue != null && previousValue.Machines.Contains(this))
            {
                previousValue.Machines.Remove(this);
            }
    
            if (MachineFamily != null)
            {
                if (!MachineFamily.Machines.Contains(this))
                {
                    MachineFamily.Machines.Add(this);
                }
            }
        }
    
        private void FixupStationMachines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StationMachine item in e.NewItems)
                {
                    item.Machine = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StationMachine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Machine, this))
                    {
                        item.Machine = null;
                    }
                }
            }
        }
    
        private void FixupStateStationActivityMachines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StateStationActivityMachine item in e.NewItems)
                {
                    item.Machine = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StateStationActivityMachine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Machine, this))
                    {
                        item.Machine = null;
                    }
                }
            }
        }
    
        private void FixupCosts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Cost item in e.NewItems)
                {
                    item.Machine = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Cost item in e.OldItems)
                {
                    if (ReferenceEquals(item.Machine, this))
                    {
                        item.Machine = null;
                    }
                }
            }
        }

        #endregion

    }
}

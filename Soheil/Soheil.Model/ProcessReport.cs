//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class ProcessReport
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual int ProducedG1
        {
            get { return _producedG1; }
            set { _producedG1 = value; }
        }
        private int _producedG1 = 0;
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }
    
        public virtual int ProcessReportTargetPoint
        {
            get;
            set;
        }
    
        public virtual int DurationSeconds
        {
            get;
            set;
        }
    
        public virtual System.DateTime StartDateTime
        {
            get;
            set;
        }
    
        public virtual System.DateTime EndDateTime
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<StoppageReport> StoppageReports
        {
            get
            {
                if (_stoppageReports == null)
                {
                    var newCollection = new FixupCollection<StoppageReport>();
                    newCollection.CollectionChanged += FixupStoppageReports;
                    _stoppageReports = newCollection;
                }
                return _stoppageReports;
            }
            set
            {
                if (!ReferenceEquals(_stoppageReports, value))
                {
                    var previousValue = _stoppageReports as FixupCollection<StoppageReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoppageReports;
                    }
                    _stoppageReports = value;
                    var newValue = value as FixupCollection<StoppageReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoppageReports;
                    }
                }
            }
        }
        private ICollection<StoppageReport> _stoppageReports;
    
        public virtual TaskReport TaskReport
        {
            get { return _taskReport; }
            set
            {
                if (!ReferenceEquals(_taskReport, value))
                {
                    var previousValue = _taskReport;
                    _taskReport = value;
                    FixupTaskReport(previousValue);
                }
            }
        }
        private TaskReport _taskReport;
    
        public virtual ICollection<DefectionReport> DefectionReports
        {
            get
            {
                if (_defectionReports == null)
                {
                    var newCollection = new FixupCollection<DefectionReport>();
                    newCollection.CollectionChanged += FixupDefectionReports;
                    _defectionReports = newCollection;
                }
                return _defectionReports;
            }
            set
            {
                if (!ReferenceEquals(_defectionReports, value))
                {
                    var previousValue = _defectionReports as FixupCollection<DefectionReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDefectionReports;
                    }
                    _defectionReports = value;
                    var newValue = value as FixupCollection<DefectionReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDefectionReports;
                    }
                }
            }
        }
        private ICollection<DefectionReport> _defectionReports;
    
        public virtual ICollection<OperatorProcessReport> OperatorProcessReports
        {
            get
            {
                if (_operatorProcessReports == null)
                {
                    var newCollection = new FixupCollection<OperatorProcessReport>();
                    newCollection.CollectionChanged += FixupOperatorProcessReports;
                    _operatorProcessReports = newCollection;
                }
                return _operatorProcessReports;
            }
            set
            {
                if (!ReferenceEquals(_operatorProcessReports, value))
                {
                    var previousValue = _operatorProcessReports as FixupCollection<OperatorProcessReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOperatorProcessReports;
                    }
                    _operatorProcessReports = value;
                    var newValue = value as FixupCollection<OperatorProcessReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOperatorProcessReports;
                    }
                }
            }
        }
        private ICollection<OperatorProcessReport> _operatorProcessReports;
    
        public virtual Process Process
        {
            get { return _process; }
            set
            {
                if (!ReferenceEquals(_process, value))
                {
                    var previousValue = _process;
                    _process = value;
                    FixupProcess(previousValue);
                }
            }
        }
        private Process _process;

        #endregion

        #region Association Fixup
    
        private void FixupTaskReport(TaskReport previousValue)
        {
            if (previousValue != null && previousValue.ProcessReports.Contains(this))
            {
                previousValue.ProcessReports.Remove(this);
            }
    
            if (TaskReport != null)
            {
                if (!TaskReport.ProcessReports.Contains(this))
                {
                    TaskReport.ProcessReports.Add(this);
                }
            }
        }
    
        private void FixupProcess(Process previousValue)
        {
            if (previousValue != null && previousValue.ProcessReports.Contains(this))
            {
                previousValue.ProcessReports.Remove(this);
            }
    
            if (Process != null)
            {
                if (!Process.ProcessReports.Contains(this))
                {
                    Process.ProcessReports.Add(this);
                }
            }
        }
    
        private void FixupStoppageReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoppageReport item in e.NewItems)
                {
                    item.ProcessReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoppageReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProcessReport, this))
                    {
                        item.ProcessReport = null;
                    }
                }
            }
        }
    
        private void FixupDefectionReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DefectionReport item in e.NewItems)
                {
                    item.ProcessReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DefectionReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProcessReport, this))
                    {
                        item.ProcessReport = null;
                    }
                }
            }
        }
    
        private void FixupOperatorProcessReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OperatorProcessReport item in e.NewItems)
                {
                    item.ProcessReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OperatorProcessReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProcessReport, this))
                    {
                        item.ProcessReport = null;
                    }
                }
            }
        }

        #endregion

    }
}

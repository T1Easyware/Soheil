//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class User
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> BypassPositionAccess
        {
            get { return _bypassPositionAccess; }
            set { _bypassPositionAccess = value; }
        }
        private Nullable<bool> _bypassPositionAccess = false;
    
        public virtual int Code
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual string Username
        {
            get;
            set;
        }
    
        public virtual string Password
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual byte Status
        {
            get { return _status; }
            set { _status = value; }
        }
        private byte _status = 1;
    
        public virtual int CreatedBy
        {
            get;
            set;
        }
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<User_Position> User_Positions
        {
            get
            {
                if (_user_Positions == null)
                {
                    var newCollection = new FixupCollection<User_Position>();
                    newCollection.CollectionChanged += FixupUser_Positions;
                    _user_Positions = newCollection;
                }
                return _user_Positions;
            }
            set
            {
                if (!ReferenceEquals(_user_Positions, value))
                {
                    var previousValue = _user_Positions as FixupCollection<User_Position>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUser_Positions;
                    }
                    _user_Positions = value;
                    var newValue = value as FixupCollection<User_Position>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUser_Positions;
                    }
                }
            }
        }
        private ICollection<User_Position> _user_Positions;
    
        public virtual ICollection<User_AccessRule> User_AccessRules
        {
            get
            {
                if (_user_AccessRules == null)
                {
                    var newCollection = new FixupCollection<User_AccessRule>();
                    newCollection.CollectionChanged += FixupUser_AccessRules;
                    _user_AccessRules = newCollection;
                }
                return _user_AccessRules;
            }
            set
            {
                if (!ReferenceEquals(_user_AccessRules, value))
                {
                    var previousValue = _user_AccessRules as FixupCollection<User_AccessRule>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUser_AccessRules;
                    }
                    _user_AccessRules = value;
                    var newValue = value as FixupCollection<User_AccessRule>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUser_AccessRules;
                    }
                }
            }
        }
        private ICollection<User_AccessRule> _user_AccessRules;

        #endregion

        #region Association Fixup
    
        private void FixupUser_Positions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User_Position item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User_Position item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUser_AccessRules(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User_AccessRule item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User_AccessRule item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }

        #endregion

    }
}

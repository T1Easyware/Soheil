//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class DefectionReport
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual int LostCount
        {
            get;
            set;
        }
    
        public virtual int LostTime
        {
            get;
            set;
        }
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }
    
        public virtual bool AffectsTaskReport
        {
            get { return _affectsTaskReport; }
            set { _affectsTaskReport = value; }
        }
        private bool _affectsTaskReport = false;

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<FishboneNode> FishboneNodes
        {
            get
            {
                if (_fishboneNodes == null)
                {
                    var newCollection = new FixupCollection<FishboneNode>();
                    newCollection.CollectionChanged += FixupFishboneNodes;
                    _fishboneNodes = newCollection;
                }
                return _fishboneNodes;
            }
            set
            {
                if (!ReferenceEquals(_fishboneNodes, value))
                {
                    var previousValue = _fishboneNodes as FixupCollection<FishboneNode>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFishboneNodes;
                    }
                    _fishboneNodes = value;
                    var newValue = value as FixupCollection<FishboneNode>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFishboneNodes;
                    }
                }
            }
        }
        private ICollection<FishboneNode> _fishboneNodes;
    
        public virtual ActionPlan ActionPlan
        {
            get { return _actionPlan; }
            set
            {
                if (!ReferenceEquals(_actionPlan, value))
                {
                    var previousValue = _actionPlan;
                    _actionPlan = value;
                    FixupActionPlan(previousValue);
                }
            }
        }
        private ActionPlan _actionPlan;
    
        public virtual ProcessReport ProcessReport
        {
            get { return _processReport; }
            set
            {
                if (!ReferenceEquals(_processReport, value))
                {
                    var previousValue = _processReport;
                    _processReport = value;
                    FixupProcessReport(previousValue);
                }
            }
        }
        private ProcessReport _processReport;
    
        public virtual ICollection<OperatorDefectionReport> OperatorDefectionReports
        {
            get
            {
                if (_operatorDefectionReports == null)
                {
                    var newCollection = new FixupCollection<OperatorDefectionReport>();
                    newCollection.CollectionChanged += FixupOperatorDefectionReports;
                    _operatorDefectionReports = newCollection;
                }
                return _operatorDefectionReports;
            }
            set
            {
                if (!ReferenceEquals(_operatorDefectionReports, value))
                {
                    var previousValue = _operatorDefectionReports as FixupCollection<OperatorDefectionReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOperatorDefectionReports;
                    }
                    _operatorDefectionReports = value;
                    var newValue = value as FixupCollection<OperatorDefectionReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOperatorDefectionReports;
                    }
                }
            }
        }
        private ICollection<OperatorDefectionReport> _operatorDefectionReports;
    
        public virtual ProductDefection ProductDefection
        {
            get { return _productDefection; }
            set
            {
                if (!ReferenceEquals(_productDefection, value))
                {
                    var previousValue = _productDefection;
                    _productDefection = value;
                    FixupProductDefection(previousValue);
                }
            }
        }
        private ProductDefection _productDefection;

        #endregion

        #region Association Fixup
    
        private void FixupActionPlan(ActionPlan previousValue)
        {
            if (previousValue != null && previousValue.DefectionReports.Contains(this))
            {
                previousValue.DefectionReports.Remove(this);
            }
    
            if (ActionPlan != null)
            {
                if (!ActionPlan.DefectionReports.Contains(this))
                {
                    ActionPlan.DefectionReports.Add(this);
                }
            }
        }
    
        private void FixupProcessReport(ProcessReport previousValue)
        {
            if (previousValue != null && previousValue.DefectionReports.Contains(this))
            {
                previousValue.DefectionReports.Remove(this);
            }
    
            if (ProcessReport != null)
            {
                if (!ProcessReport.DefectionReports.Contains(this))
                {
                    ProcessReport.DefectionReports.Add(this);
                }
            }
        }
    
        private void FixupProductDefection(ProductDefection previousValue)
        {
            if (previousValue != null && previousValue.DefectionReports.Contains(this))
            {
                previousValue.DefectionReports.Remove(this);
            }
    
            if (ProductDefection != null)
            {
                if (!ProductDefection.DefectionReports.Contains(this))
                {
                    ProductDefection.DefectionReports.Add(this);
                }
            }
        }
    
        private void FixupFishboneNodes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (FishboneNode item in e.NewItems)
                {
                    item.DefectionReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FishboneNode item in e.OldItems)
                {
                    if (ReferenceEquals(item.DefectionReport, this))
                    {
                        item.DefectionReport = null;
                    }
                }
            }
        }
    
        private void FixupOperatorDefectionReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OperatorDefectionReport item in e.NewItems)
                {
                    item.DefectionReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OperatorDefectionReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.DefectionReport, this))
                    {
                        item.DefectionReport = null;
                    }
                }
            }
        }

        #endregion

    }
}

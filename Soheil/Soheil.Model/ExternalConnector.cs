//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class ExternalConnector
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual StateStationActivity StartSSA
        {
            get { return _startSSA; }
            set
            {
                if (!ReferenceEquals(_startSSA, value))
                {
                    var previousValue = _startSSA;
                    _startSSA = value;
                    FixupStartSSA(previousValue);
                }
            }
        }
        private StateStationActivity _startSSA;
    
        public virtual StateStationActivity EndSSA
        {
            get { return _endSSA; }
            set
            {
                if (!ReferenceEquals(_endSSA, value))
                {
                    var previousValue = _endSSA;
                    _endSSA = value;
                    FixupEndSSA(previousValue);
                }
            }
        }
        private StateStationActivity _endSSA;

        #endregion

        #region Association Fixup
    
        private void FixupStartSSA(StateStationActivity previousValue)
        {
            if (previousValue != null && previousValue.OutExternalConnectors.Contains(this))
            {
                previousValue.OutExternalConnectors.Remove(this);
            }
    
            if (StartSSA != null)
            {
                if (!StartSSA.OutExternalConnectors.Contains(this))
                {
                    StartSSA.OutExternalConnectors.Add(this);
                }
            }
        }
    
        private void FixupEndSSA(StateStationActivity previousValue)
        {
            if (previousValue != null && previousValue.InExternalConnectors.Contains(this))
            {
                previousValue.InExternalConnectors.Remove(this);
            }
    
            if (EndSSA != null)
            {
                if (!EndSSA.InExternalConnectors.Contains(this))
                {
                    EndSSA.InExternalConnectors.Add(this);
                }
            }
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class FPC
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual byte Status
        {
            get { return _status; }
            set { _status = value; }
        }
        private byte _status = 1;
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }
    
        public virtual bool IsDefault
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<State> States
        {
            get
            {
                if (_states == null)
                {
                    var newCollection = new FixupCollection<State>();
                    newCollection.CollectionChanged += FixupStates;
                    _states = newCollection;
                }
                return _states;
            }
            set
            {
                if (!ReferenceEquals(_states, value))
                {
                    var previousValue = _states as FixupCollection<State>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStates;
                    }
                    _states = value;
                    var newValue = value as FixupCollection<State>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStates;
                    }
                }
            }
        }
        private ICollection<State> _states;
    
        public virtual Product Product
        {
            get { return _product; }
            set
            {
                if (!ReferenceEquals(_product, value))
                {
                    var previousValue = _product;
                    _product = value;
                    FixupProduct(previousValue);
                }
            }
        }
        private Product _product;
    
        public virtual ICollection<Job> Jobs
        {
            get
            {
                if (_jobs == null)
                {
                    var newCollection = new FixupCollection<Job>();
                    newCollection.CollectionChanged += FixupJobs;
                    _jobs = newCollection;
                }
                return _jobs;
            }
            set
            {
                if (!ReferenceEquals(_jobs, value))
                {
                    var previousValue = _jobs as FixupCollection<Job>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupJobs;
                    }
                    _jobs = value;
                    var newValue = value as FixupCollection<Job>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupJobs;
                    }
                }
            }
        }
        private ICollection<Job> _jobs;

        #endregion

        #region Association Fixup
    
        private void FixupProduct(Product previousValue)
        {
            if (previousValue != null && previousValue.FPCs.Contains(this))
            {
                previousValue.FPCs.Remove(this);
            }
    
            if (Product != null)
            {
                if (!Product.FPCs.Contains(this))
                {
                    Product.FPCs.Add(this);
                }
            }
        }
    
        private void FixupStates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (State item in e.NewItems)
                {
                    item.FPC = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (State item in e.OldItems)
                {
                    if (ReferenceEquals(item.FPC, this))
                    {
                        item.FPC = null;
                    }
                }
            }
        }
    
        private void FixupJobs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Job item in e.NewItems)
                {
                    item.FPC = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Job item in e.OldItems)
                {
                    if (ReferenceEquals(item.FPC, this))
                    {
                        item.FPC = null;
                    }
                }
            }
        }

        #endregion

    }
}

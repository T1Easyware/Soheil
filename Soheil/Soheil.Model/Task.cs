//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class Task
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int DurationSeconds
        {
            get;
            set;
        }
    
        public virtual System.DateTime StartDateTime
        {
            get;
            set;
        }
    
        public virtual int TaskTargetPoint
        {
            get;
            set;
        }
    
        public virtual System.DateTime EndDateTime
        {
            get;
            set;
        }
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Process> Processes
        {
            get
            {
                if (_processes == null)
                {
                    var newCollection = new FixupCollection<Process>();
                    newCollection.CollectionChanged += FixupProcesses;
                    _processes = newCollection;
                }
                return _processes;
            }
            set
            {
                if (!ReferenceEquals(_processes, value))
                {
                    var previousValue = _processes as FixupCollection<Process>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProcesses;
                    }
                    _processes = value;
                    var newValue = value as FixupCollection<Process>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProcesses;
                    }
                }
            }
        }
        private ICollection<Process> _processes;
    
        public virtual ICollection<TaskReport> TaskReports
        {
            get
            {
                if (_taskReports == null)
                {
                    var newCollection = new FixupCollection<TaskReport>();
                    newCollection.CollectionChanged += FixupTaskReports;
                    _taskReports = newCollection;
                }
                return _taskReports;
            }
            set
            {
                if (!ReferenceEquals(_taskReports, value))
                {
                    var previousValue = _taskReports as FixupCollection<TaskReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTaskReports;
                    }
                    _taskReports = value;
                    var newValue = value as FixupCollection<TaskReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTaskReports;
                    }
                }
            }
        }
        private ICollection<TaskReport> _taskReports;
    
        public virtual Block Block
        {
            get { return _block; }
            set
            {
                if (!ReferenceEquals(_block, value))
                {
                    var previousValue = _block;
                    _block = value;
                    FixupBlock(previousValue);
                }
            }
        }
        private Block _block;

        #endregion

        #region Association Fixup
    
        private void FixupBlock(Block previousValue)
        {
            if (previousValue != null && previousValue.Tasks.Contains(this))
            {
                previousValue.Tasks.Remove(this);
            }
    
            if (Block != null)
            {
                if (!Block.Tasks.Contains(this))
                {
                    Block.Tasks.Add(this);
                }
            }
        }
    
        private void FixupProcesses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Process item in e.NewItems)
                {
                    item.Task = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Process item in e.OldItems)
                {
                    if (ReferenceEquals(item.Task, this))
                    {
                        item.Task = null;
                    }
                }
            }
        }
    
        private void FixupTaskReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TaskReport item in e.NewItems)
                {
                    item.Task = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Task, this))
                    {
                        item.Task = null;
                    }
                }
            }
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class ProcessOperatorReport
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int OperatorProducedG1
        {
            get { return _operatorProducedG1; }
            set { _operatorProducedG1 = value; }
        }
        private int _operatorProducedG1 = 0;
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ProcessReport ProcessReport
        {
            get { return _processReport; }
            set
            {
                if (!ReferenceEquals(_processReport, value))
                {
                    var previousValue = _processReport;
                    _processReport = value;
                    FixupProcessReport(previousValue);
                }
            }
        }
        private ProcessReport _processReport;
    
        public virtual ProcessOperator ProcessOperator
        {
            get { return _processOperator; }
            set
            {
                if (!ReferenceEquals(_processOperator, value))
                {
                    var previousValue = _processOperator;
                    _processOperator = value;
                    FixupProcessOperator(previousValue);
                }
            }
        }
        private ProcessOperator _processOperator;

        #endregion

        #region Association Fixup
    
        private void FixupProcessReport(ProcessReport previousValue)
        {
            if (previousValue != null && previousValue.ProcessOperatorReports.Contains(this))
            {
                previousValue.ProcessOperatorReports.Remove(this);
            }
    
            if (ProcessReport != null)
            {
                if (!ProcessReport.ProcessOperatorReports.Contains(this))
                {
                    ProcessReport.ProcessOperatorReports.Add(this);
                }
            }
        }
    
        private void FixupProcessOperator(ProcessOperator previousValue)
        {
            if (previousValue != null && previousValue.ProcessOperatorReports.Contains(this))
            {
                previousValue.ProcessOperatorReports.Remove(this);
            }
    
            if (ProcessOperator != null)
            {
                if (!ProcessOperator.ProcessOperatorReports.Contains(this))
                {
                    ProcessOperator.ProcessOperatorReports.Add(this);
                }
            }
        }

        #endregion

    }
}

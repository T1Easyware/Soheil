//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class SelectedMachine
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual StateStationActivityMachine StateStationActivityMachine
        {
            get { return _stateStationActivityMachine; }
            set
            {
                if (!ReferenceEquals(_stateStationActivityMachine, value))
                {
                    var previousValue = _stateStationActivityMachine;
                    _stateStationActivityMachine = value;
                    FixupStateStationActivityMachine(previousValue);
                }
            }
        }
        private StateStationActivityMachine _stateStationActivityMachine;
    
        public virtual Process Process
        {
            get { return _process; }
            set
            {
                if (!ReferenceEquals(_process, value))
                {
                    var previousValue = _process;
                    _process = value;
                    FixupProcess(previousValue);
                }
            }
        }
        private Process _process;

        #endregion

        #region Association Fixup
    
        private void FixupStateStationActivityMachine(StateStationActivityMachine previousValue)
        {
            if (previousValue != null && previousValue.SelectedMachines.Contains(this))
            {
                previousValue.SelectedMachines.Remove(this);
            }
    
            if (StateStationActivityMachine != null)
            {
                if (!StateStationActivityMachine.SelectedMachines.Contains(this))
                {
                    StateStationActivityMachine.SelectedMachines.Add(this);
                }
            }
        }
    
        private void FixupProcess(Process previousValue)
        {
            if (previousValue != null && previousValue.SelectedMachines.Contains(this))
            {
                previousValue.SelectedMachines.Remove(this);
            }
    
            if (Process != null)
            {
                if (!Process.SelectedMachines.Contains(this))
                {
                    Process.SelectedMachines.Add(this);
                }
            }
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class StateStation
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual State State
        {
            get { return _state; }
            set
            {
                if (!ReferenceEquals(_state, value))
                {
                    var previousValue = _state;
                    _state = value;
                    FixupState(previousValue);
                }
            }
        }
        private State _state;
    
        public virtual ICollection<Task> Tasks
        {
            get
            {
                if (_tasks == null)
                {
                    var newCollection = new FixupCollection<Task>();
                    newCollection.CollectionChanged += FixupTasks;
                    _tasks = newCollection;
                }
                return _tasks;
            }
            set
            {
                if (!ReferenceEquals(_tasks, value))
                {
                    var previousValue = _tasks as FixupCollection<Task>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTasks;
                    }
                    _tasks = value;
                    var newValue = value as FixupCollection<Task>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTasks;
                    }
                }
            }
        }
        private ICollection<Task> _tasks;
    
        public virtual ICollection<StateStationActivity> StateStationActivities
        {
            get
            {
                if (_stateStationActivities == null)
                {
                    var newCollection = new FixupCollection<StateStationActivity>();
                    newCollection.CollectionChanged += FixupStateStationActivities;
                    _stateStationActivities = newCollection;
                }
                return _stateStationActivities;
            }
            set
            {
                if (!ReferenceEquals(_stateStationActivities, value))
                {
                    var previousValue = _stateStationActivities as FixupCollection<StateStationActivity>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStateStationActivities;
                    }
                    _stateStationActivities = value;
                    var newValue = value as FixupCollection<StateStationActivity>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStateStationActivities;
                    }
                }
            }
        }
        private ICollection<StateStationActivity> _stateStationActivities;
    
        public virtual Station Station
        {
            get { return _station; }
            set
            {
                if (!ReferenceEquals(_station, value))
                {
                    var previousValue = _station;
                    _station = value;
                    FixupStation(previousValue);
                }
            }
        }
        private Station _station;

        #endregion

        #region Association Fixup
    
        private void FixupState(State previousValue)
        {
            if (previousValue != null && previousValue.StateStations.Contains(this))
            {
                previousValue.StateStations.Remove(this);
            }
    
            if (State != null)
            {
                if (!State.StateStations.Contains(this))
                {
                    State.StateStations.Add(this);
                }
            }
        }
    
        private void FixupStation(Station previousValue)
        {
            if (previousValue != null && previousValue.StateStations.Contains(this))
            {
                previousValue.StateStations.Remove(this);
            }
    
            if (Station != null)
            {
                if (!Station.StateStations.Contains(this))
                {
                    Station.StateStations.Add(this);
                }
            }
        }
    
        private void FixupTasks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Task item in e.NewItems)
                {
                    item.StateStation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Task item in e.OldItems)
                {
                    if (ReferenceEquals(item.StateStation, this))
                    {
                        item.StateStation = null;
                    }
                }
            }
        }
    
        private void FixupStateStationActivities(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StateStationActivity item in e.NewItems)
                {
                    item.StateStation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StateStationActivity item in e.OldItems)
                {
                    if (ReferenceEquals(item.StateStation, this))
                    {
                        item.StateStation = null;
                    }
                }
            }
        }

        #endregion

    }
}

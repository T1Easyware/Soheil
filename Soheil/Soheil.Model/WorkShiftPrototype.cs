//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class WorkShiftPrototype
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual int ColorNr
        {
            get { return _colorNr; }
            set { _colorNr = value; }
        }
        private int _colorNr = 0;
    
        public virtual byte Index
        {
            get { return _index; }
            set { _index = value; }
        }
        private byte _index = 0;

        #endregion

        #region Navigation Properties
    
        public virtual WorkProfile WorkProfile
        {
            get { return _workProfile; }
            set
            {
                if (!ReferenceEquals(_workProfile, value))
                {
                    var previousValue = _workProfile;
                    _workProfile = value;
                    FixupWorkProfile(previousValue);
                }
            }
        }
        private WorkProfile _workProfile;
    
        public virtual ICollection<WorkShift> WorkShifts
        {
            get
            {
                if (_workShifts == null)
                {
                    var newCollection = new FixupCollection<WorkShift>();
                    newCollection.CollectionChanged += FixupWorkShifts;
                    _workShifts = newCollection;
                }
                return _workShifts;
            }
            set
            {
                if (!ReferenceEquals(_workShifts, value))
                {
                    var previousValue = _workShifts as FixupCollection<WorkShift>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWorkShifts;
                    }
                    _workShifts = value;
                    var newValue = value as FixupCollection<WorkShift>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWorkShifts;
                    }
                }
            }
        }
        private ICollection<WorkShift> _workShifts;

        #endregion

        #region Association Fixup
    
        private void FixupWorkProfile(WorkProfile previousValue)
        {
            if (previousValue != null && previousValue.WorkShiftPrototypes.Contains(this))
            {
                previousValue.WorkShiftPrototypes.Remove(this);
            }
    
            if (WorkProfile != null)
            {
                if (!WorkProfile.WorkShiftPrototypes.Contains(this))
                {
                    WorkProfile.WorkShiftPrototypes.Add(this);
                }
            }
        }
    
        private void FixupWorkShifts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (WorkShift item in e.NewItems)
                {
                    item.WorkShiftPrototype = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WorkShift item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkShiftPrototype, this))
                    {
                        item.WorkShiftPrototype = null;
                    }
                }
            }
        }

        #endregion

    }
}

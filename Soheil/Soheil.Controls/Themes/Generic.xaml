<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Common="clr-namespace:Soheil.Common;assembly=Soheil.Common"
                    xmlns:CustomControls="clr-namespace:Soheil.Controls.CustomControls" 
					xmlns:sys="clr-namespace:System;assembly=mscorlib">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="/Soheil.Controls;component/Layout/Brushes.xaml" />
    <ResourceDictionary Source="/Soheil.Controls;component/Layout/Styles.xaml" />
    <ResourceDictionary Source="/Soheil.Controls;component/Layout/ExpressionDark.xaml" />
    <ResourceDictionary>
            <ObjectDataProvider x:Key="AlignmentValues" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="Common:Status" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
        </ResourceDictionary>
  </ResourceDictionary.MergedDictionaries>

  <!--  Chrome Tab Panel  -->
  <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type CustomControls:ChromeTabPanel}, ResourceId=addButtonStyle}"
		TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid SnapsToDevicePixels="True">
            <Path Name="NewTab"
                  Data="M36.904667,19.333333 C42.238,19.25 36.238,0.5 34.863116,0.5 23.863116,0.5 19.613032,0.5 2.8630319,0.5 -3.2202511,0.5 4.0712139,19.416667 6.5711261,19.416667 15.593514,19.416667 28.609259,19.462949 36.904667,19.333333 z"
                  Fill="{TemplateBinding Background}" Stretch="Fill" Stroke="{StaticResource ThemeLightBrush}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  Chrome Close Button  -->
  <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}">
    <Style.Resources>
      <sys:Double x:Key="CloseButtonWidth">6</sys:Double>
      <sys:Double x:Key="CloseCircleWidth">12</sys:Double>
      <sys:Double x:Key="CloseButtonOffset">3</sys:Double>
    </Style.Resources>
    <Setter Property="Height" Value="{StaticResource CloseCircleWidth}" />
    <Setter Property="Width" Value="{StaticResource CloseCircleWidth}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{StaticResource MainWindowBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Canvas x:Name="CloseButton" Width="{StaticResource CloseCircleWidth}"
                  Height="{StaticResource CloseCircleWidth}" Background="Transparent">
            <Ellipse Width="{StaticResource CloseCircleWidth}" Height="{StaticResource CloseCircleWidth}"
                     Fill="{TemplateBinding Background}" />
            <Canvas Canvas.Left="{StaticResource CloseButtonOffset}"
                    Canvas.Top="{StaticResource CloseButtonOffset}" Width="{StaticResource CloseButtonWidth}"
                    Height="{StaticResource CloseButtonWidth}" Background="Transparent">
              <Line Stroke="{TemplateBinding Foreground}" StrokeThickness="2" X1="0"
                    X2="{StaticResource CloseButtonWidth}" Y1="0" Y2="{StaticResource CloseButtonWidth}" />
              <Line Stroke="{TemplateBinding Foreground}" StrokeThickness="2" X1="0"
                    X2="{StaticResource CloseButtonWidth}" Y1="{StaticResource CloseButtonWidth}" Y2="0" />
            </Canvas>
          </Canvas>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{StaticResource MainWindowBorderBrush}" />
        <Setter Property="Foreground" Value="White" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--  Chrome Tab Control  -->
  <Style TargetType="{x:Type CustomControls:ChromeTabControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CustomControls:ChromeTabControl}">
          <Grid FlowDirection="RightToLeft">
            <Grid.RowDefinitions>
              <RowDefinition Height="15" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <CustomControls:ChromeTabPanel Background="Transparent" IsItemsHost="True">
              <!--
                                <CustomControls:ChromeTabPanel.Background>
                                <LinearGradientBrush StartPoint="0 0" EndPoint="1 0">
                                <GradientStop Offset="0" Color="{StaticResource ThemeDarkColor}" />
                                <GradientStop Offset=".5" Color="{StaticResource ThemeMediumColor}" />
                                <GradientStop Offset="1" Color="{StaticResource ThemeDarkColor}" />
                                </LinearGradientBrush>
                                </CustomControls:ChromeTabPanel.Background>
                            -->
            </CustomControls:ChromeTabPanel>
            <Grid Grid.Row="1">
              <ContentPresenter Content="{TemplateBinding SelectedContent}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  Chrome Tab Item  -->
  <Style TargetType="{x:Type CustomControls:ChromeTabItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CustomControls:ChromeTabItem}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="5" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="20" />
              <ColumnDefinition Width="5" />
            </Grid.ColumnDefinitions>
            <Path Name="TabFill" Grid.ColumnSpan="4" Margin="0 0 0 1" VerticalAlignment="Top"
                  Data="M39,96 C48.75,96 59.25,0 76,0 92.75,0 247,0 258,0 269,0 285.5,95.75 295,96" Stretch="Fill">
              <Path.Fill>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                  <GradientStop Offset="0" Color="{StaticResource ThemeLightColor}" />
                  <GradientStop Offset="1" Color="{StaticResource ThemeMediumColor}" />
                </LinearGradientBrush>
              </Path.Fill>
            </Path>
            <Path Name="TabPath" Grid.ColumnSpan="4" VerticalAlignment="Top"
                  Data="M39,96 C48.75,96 59.25,0 76,0 92.75,0 247,0 258,0 269,0 285.5,95.75 295,96" Stretch="Fill"
                  Stroke="{StaticResource ThemeLightBrush}" />
            <Path Name="TabHighlight" Grid.ColumnSpan="4" Margin="0 0 0 1" VerticalAlignment="Top"
                  Data="M39,96 C48.75,96 59.25,0 76,0 92.75,0 247,0 258,0 269,0 285.5,95.75 295,96" Stretch="Fill"
                  Stroke="{StaticResource ThemeMediumBrush}">
              <Path.RenderTransformOrigin>
                <Point X=".5" Y=".5" />
              </Path.RenderTransformOrigin>
              <Path.RenderTransform>
                <TransformGroup>
                  <TranslateTransform Y=".5" />
                  <ScaleTransform ScaleX=".96" ScaleY=".94" />
                </TransformGroup>
              </Path.RenderTransform>
            </Path>
            <Label Grid.Column="1" Margin="10 0 0 0" VerticalAlignment="Center"
                   Content="{TemplateBinding Header}" />
            <Button Grid.Column="2" Margin="0 0 10 0"
                    Command="{x:Static CustomControls:ChromeTabItem.CloseTabCommand}" KeyboardNavigation.IsTabStop="False"
                    Style="{StaticResource CloseButtonStyle}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="TabFill" Property="Fill" Value="{StaticResource DefaultSelectionBrush}" />
              <Setter TargetName="TabFill" Property="Margin" Value="0 0 0 -1" />
              <Setter TargetName="TabPath" Property="Margin" Value="0" />
              <Setter TargetName="TabHighlight" Property="Stroke" Value="Transparent" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  Image Button  -->
  <Style TargetType="{x:Type CustomControls:ImageButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource NuclearButtonFocusVisual}" />
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource ThemeDarkBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CustomControls:ImageButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.75" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CheckedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="grid">
                        <Border x:Name="Border" Background="{DynamicResource ButtonNormalBrush}"
                    BorderBrush="{DynamicResource ThemeDarkBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="3,3,3,3" Opacity="0.1" Padding="{TemplateBinding Padding}" />
                        <Border x:Name="CheckedBorder" Background="{DynamicResource SelectedItemBrush}"
                    BorderBrush="{DynamicResource SelectedItemBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="3,3,3,3" Opacity="0" Padding="{TemplateBinding Padding}" />
                        <Border x:Name="HoverBorder" Background="{DynamicResource HoverSelectionBrush}"
                    BorderBrush="{DynamicResource HoverSelectionBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="3,3,3,3" Opacity="0" Padding="{TemplateBinding Padding}" />
                        <Border x:Name="Pressed" Background="{DynamicResource SelectedItemBrush}"
                    BorderBrush="{DynamicResource SelectedItemBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="3,3,3,3" Opacity="0" Padding="{TemplateBinding Padding}" />
                        <Rectangle x:Name="Shine" Height="Auto" Margin="2,2,2,2" VerticalAlignment="Stretch"
                       Opacity="1" RadiusX="3" RadiusY="3" Stroke="{x:Null}">
                        </Rectangle>
                        <DockPanel>
                            <Image Source="{TemplateBinding ImageSource}" Width="16" Height="16" Stretch="Fill"/>
                            <ContentPresenter Margin="1"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="Center" RecognizesAccessKey="True" />
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="HoverOff_BeginStoryboard"
                                 Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="PressedOff_BeginStoryboard"
                                 Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PressedOn_BeginStoryboard"
                                 Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                            <Setter TargetName="Border" Property="Background"
                      Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                      Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter TargetName="grid" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
  <!--  Image RadioButton  -->
  <Style TargetType="{x:Type CustomControls:ImageRadioButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource DarkTextBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Padding" Value="7,2" />
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CustomControls:ImageRadioButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource LightTextColor}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">

                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DarkTextColor}" />
                            </ColorAnimationUsingKeyFrames>

                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="Grid">
                        <Border x:Name="Background" Background="{StaticResource ButtonNormalBrush}"
              BorderBrush="{StaticResource ThemeDarkBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" />
                        <Border x:Name="HoverBorder" Background="{StaticResource BlueHoverBrush}"
              BorderBrush="{StaticResource BlueHoverBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1"
              Opacity="0" />

                        <DockPanel>
                            <Image Source="{TemplateBinding ImageSource}" Width="16" Height="16" Stretch="Fill"/>
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="Center" RecognizesAccessKey="True" />
                        </DockPanel>
                        <Border x:Name="FocusVisualElement" Margin="1,1,1,1" BorderBrush="{StaticResource BlueSelectedBrush}" 
              BorderThickness="1" CornerRadius="1,1,1,1" IsHitTestVisible="false" Opacity="0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Grid" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type CustomControls:MultiLevelBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CustomControls:MultiLevelBar}">
                    <Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="15"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <TextBlock x:Name="Color3" Height="{TemplateBinding Level3}" Background="{TemplateBinding BackColor3}" Text="{Binding RelativeSource={RelativeSource Self} ,Path=ActualHeight }" Grid.Column="0" Grid.Row="0"/>
                            <Rectangle x:Name="Bar3" Height="{TemplateBinding Level3}" Fill="{TemplateBinding EffectColor3}" Grid.Column="1" Grid.Row="0"/>
                            <TextBlock x:Name="Color2" Height="{TemplateBinding Level2}" Background="{TemplateBinding BackColor2}" Text="{TemplateBinding Level2}" Grid.Column="0" Grid.Row="1"/>
                            <Rectangle x:Name="Bar2" Height="{TemplateBinding Level2}" Fill="{TemplateBinding EffectColor2}" Grid.Column="1" Grid.Row="1"/>
                            <TextBlock x:Name="Color1" Height="{TemplateBinding Level1}" Background="{TemplateBinding BackColor1}" Text="{TemplateBinding Level1}" Grid.Column="0" Grid.Row="2"/>
                            <Rectangle x:Name="Bar1" Height="{TemplateBinding Level1}" Fill="{TemplateBinding EffectColor1}" Grid.Column="1" Grid.Row="2"/>
                        </Grid>
                        <Grid x:Name="Shade" Background="White" Opacity="0">
                            <Grid.Effect>
                                <DropShadowEffect x:Name="Effect"
                                    ShadowDepth="0"
                                    Color= "White"
                                    Opacity="0"
                                    BlurRadius="20"/>
                            </Grid.Effect>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition To="MouseOver" GeneratedDuration="0:0:0.2"/>
                                    <VisualTransition To="Pressed" GeneratedDuration="0:0:0.2"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Shade" Storyboard.TargetProperty="Opacity" To="0.3" />
                                        <DoubleAnimation Storyboard.TargetName="Effect" Storyboard.TargetProperty="Opacity" To="0.5" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Shade" Storyboard.TargetProperty="Opacity" To="0.6" />
                                        <DoubleAnimation Storyboard.TargetName="Effect" Storyboard.TargetProperty="Opacity" To="0.8" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


	<Style TargetType="{x:Type CustomControls:TimeBox}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CustomControls:TimeBox}">
					<ControlTemplate.Resources>
						<Style x:Key="TimeComponents" TargetType="{x:Type TextBox}">
							<Setter Property="SnapsToDevicePixels" Value="True" />
							<Setter Property="OverridesDefaultStyle" Value="True" />
							<Setter Property="KeyboardNavigation.TabNavigation" Value="Cycle"/>
							<Setter Property="MinWidth" Value="22"/>
							<Setter Property="Height" Value="22"/>
							<Setter Property="VerticalAlignment" Value="Center"/>
							<Setter Property="Foreground" Value="White"/>
							<!--Setter Property="ContextMenu">
								<Setter.Value>
									<ContextMenu FlowDirection="LeftToRight">
										<MenuItem Header="Until work break" Command="{Binding Path=SetDurationMinutesCommand, RelativeSource={RelativeSource AncestorType={x:Type CustomControls:TimeBox}}}">
											<MenuItem.Icon>
												<Image Style="{StaticResource DurationFillToEnd}"/>
											</MenuItem.Icon>
											<MenuItem.CommandParameter>
												<sys:Int32>0</sys:Int32>
											</MenuItem.CommandParameter>
										</MenuItem>
										<MenuItem Header="15 Minutes" Command="{Binding Path=SetDurationMinutesCommand, RelativeSource={RelativeSource AncestorType={x:Type CustomControls:TimeBox}}}">
											<MenuItem.Icon>
												<Image Style="{StaticResource DurationQuarterHour}"/>
											</MenuItem.Icon>
											<MenuItem.CommandParameter>
												<sys:Int32>15</sys:Int32>
											</MenuItem.CommandParameter>
										</MenuItem>
										<MenuItem Header="30 Minutes" Command="{Binding Path=SetDurationMinutesCommand, RelativeSource={RelativeSource AncestorType={x:Type CustomControls:TimeBox}}}">
											<MenuItem.Icon>
												<Image Style="{StaticResource DurationHalfHour}"/>
											</MenuItem.Icon>
											<MenuItem.CommandParameter>
												<sys:Int32>30</sys:Int32>
											</MenuItem.CommandParameter>
										</MenuItem>
										<MenuItem Header="45 Minutes" Command="{Binding Path=SetDurationMinutesCommand, RelativeSource={RelativeSource AncestorType={x:Type CustomControls:TimeBox}}}">
											<MenuItem.Icon>
												<Image Style="{StaticResource Duration3QuratersHour}"/>
											</MenuItem.Icon>
											<MenuItem.CommandParameter>
												<sys:Int32>45</sys:Int32>
											</MenuItem.CommandParameter>
										</MenuItem>
										<MenuItem Header="1 Hour" Command="{Binding Path=SetDurationMinutesCommand, RelativeSource={RelativeSource AncestorType={x:Type CustomControls:TimeBox}}}">
											<MenuItem.Icon>
												<Image Style="{StaticResource Duration1Hour}"/>
											</MenuItem.Icon>
											<MenuItem.CommandParameter>
												<sys:Int32>60</sys:Int32>
											</MenuItem.CommandParameter>
										</MenuItem>
										<MenuItem Header="2 Hours" Command="{Binding Path=SetDurationMinutesCommand, RelativeSource={RelativeSource AncestorType={x:Type CustomControls:TimeBox}}}">
											<MenuItem.Icon>
												<Image Style="{StaticResource Duration2Hours}"/>
											</MenuItem.Icon>
											<MenuItem.CommandParameter>
												<sys:Int32>120</sys:Int32>
											</MenuItem.CommandParameter>
										</MenuItem>
									</ContextMenu>
								</Setter.Value>
							</-->
							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="{x:Type TextBoxBase}">
										<Border Name="Border" CornerRadius="2" Padding="2" BorderThickness="1">
											<Border.Background>
												<SolidColorBrush Color="#4088"/>
											</Border.Background>
											<Border.BorderBrush>
												<SolidColorBrush Color="#8088"/>
											</Border.BorderBrush>
											<VisualStateManager.VisualStateGroups>
												<VisualStateGroup x:Name="CommonStates">
													<VisualState x:Name="Normal"/>
													<VisualState x:Name="Disabled">
														<Storyboard>
															<ColorAnimationUsingKeyFrames 
														Storyboard.TargetName="Border"
														Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
																<EasingColorKeyFrame KeyTime="0" Value="Transparent"/>
															</ColorAnimationUsingKeyFrames>
															<ColorAnimationUsingKeyFrames 
														Storyboard.TargetName="Border"
														Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
																<EasingColorKeyFrame KeyTime="0" Value="Transparent"/>
															</ColorAnimationUsingKeyFrames>
														</Storyboard>
													</VisualState>
													<VisualState x:Name="ReadOnly">
														<Storyboard>
															<ColorAnimationUsingKeyFrames 
														Storyboard.TargetName="Border"
														Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
																<EasingColorKeyFrame KeyTime="0" Value="Transparent" />
															</ColorAnimationUsingKeyFrames>
															<ColorAnimationUsingKeyFrames 
														Storyboard.TargetName="Border"
														Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
																<EasingColorKeyFrame KeyTime="0" Value="Transparent" />
															</ColorAnimationUsingKeyFrames>
														</Storyboard>
													</VisualState>
													<VisualState x:Name="MouseOver">
														<Storyboard>
															<ColorAnimationUsingKeyFrames 
														Storyboard.TargetName="Border"
														Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
																<EasingColorKeyFrame KeyTime="0" Value="#88FF"/>
															</ColorAnimationUsingKeyFrames>
														</Storyboard>
													</VisualState>
													<VisualState x:Name="Focused">
														<Storyboard>
															<ColorAnimationUsingKeyFrames 
														Storyboard.TargetName="Border"
														Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
																<EasingColorKeyFrame KeyTime="0" Value="#C8FF"/>
															</ColorAnimationUsingKeyFrames>
														</Storyboard>
													</VisualState>
												</VisualStateGroup>
											</VisualStateManager.VisualStateGroups>
											<ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
										</Border>
										<ControlTemplate.Triggers>
											<Trigger Property="IsReadOnly" Value="True">
												<Setter Property="Foreground">
													<Setter.Value>
														<SolidColorBrush Color="Gray"/>
													</Setter.Value>
												</Setter>
											</Trigger>
											<Trigger Property="IsFocused" Value="True">
												<Setter Property="Foreground">
													<Setter.Value>
														<SolidColorBrush Color="Black"/>
													</Setter.Value>
												</Setter>
											</Trigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</ControlTemplate.Resources>
					<Grid FlowDirection="LeftToRight">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<TextBox Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type CustomControls:TimeBox}}, Path=Hour, StringFormat=D2}" IsReadOnly="{Binding RelativeSource={RelativeSource AncestorType={x:Type CustomControls:TimeBox}}, Path=IsReadOnly}" Style="{StaticResource TimeComponents}" FlowDirection="{TemplateBinding FlowDirection}" TextAlignment="Center"/>
						<TextBlock Text=":" VerticalAlignment="Center" Grid.Column="1"/>
						<TextBox Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type CustomControls:TimeBox}}, Path=Minute, StringFormat=D2}" IsReadOnly="{Binding RelativeSource={RelativeSource AncestorType={x:Type CustomControls:TimeBox}}, Path=IsReadOnly}" Style="{StaticResource TimeComponents}" FlowDirection="{TemplateBinding FlowDirection}" TextAlignment="Center" Grid.Column="2"/>
						<TextBlock Text=":" VerticalAlignment="Center" Grid.Column="3"/>
						<TextBox Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type CustomControls:TimeBox}}, Path=Second, StringFormat=D2}" IsReadOnly="{Binding RelativeSource={RelativeSource AncestorType={x:Type CustomControls:TimeBox}}, Path=IsReadOnly}" Style="{StaticResource TimeComponents}" FlowDirection="{TemplateBinding FlowDirection}" TextAlignment="Center" Grid.Column="4"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>

<UserControl x:Class="Soheil.Views.PP.BlockEditor"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vm="clr-namespace:Soheil.Core.ViewModels.PP;assembly=Soheil.Core" 
             xmlns:ppevm="clr-namespace:Soheil.Core.ViewModels.PP.Editor;assembly=Soheil.Core" 
			 xmlns:local="clr-namespace:Soheil.Views.PP"
             xmlns:cal="clr-namespace:Arash.PersianDateControls;assembly=PersianDateControls" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib" 
             xmlns:fpcView="clr-namespace:Soheil.Views.Fpc" 
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
			 xmlns:CustomControls="clr-namespace:Soheil.Controls.CustomControls;assembly=Soheil.Controls"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="800" FlowDirection="RightToLeft">
	<DockPanel Margin="8" Visibility="{Binding ShowFpc, Converter={StaticResource booleanToInvisibilityConverter}}">
		<!-- status bar -->
		<StatusBar DockPanel.Dock="Bottom" Background="#378">
			<!-- additional readonly info -->
			<WrapPanel DockPanel.Dock="Left" TextBlock.Foreground="Black">
				<WrapPanel.Resources>
					<Style TargetType="TextBlock">
						<Setter Property="Margin" Value="5,2"/>
						<Setter Property="MinWidth" Value="10"/>
					</Style>
					<Style TargetType="StackPanel">
						<Setter Property="Margin" Value="5,0,10,0"/>
						<Setter Property="Background" Value="#1FFF"/>
						<Setter Property="Orientation" Value="Horizontal"/>
						<Style.Triggers>
							<EventTrigger RoutedEvent="MouseEnter">
								<BeginStoryboard>
									<Storyboard Duration="0:0:1">
										<ColorAnimation Storyboard.TargetProperty="Background.(SolidColorBrush.Color)" To="#4FFF" Duration="0:0:1"/>
									</Storyboard>
								</BeginStoryboard>
							</EventTrigger>
							<EventTrigger RoutedEvent="MouseLeave">
								<BeginStoryboard>
									<Storyboard Duration="0:0:1">
										<ColorAnimation Storyboard.TargetProperty="Background.(SolidColorBrush.Color)" To="#1FFF" Duration="0:0:1"/>
									</Storyboard>
								</BeginStoryboard>
							</EventTrigger>
						</Style.Triggers>
					</Style>
				</WrapPanel.Resources>
				<StackPanel>
					<TextBlock Text="{Loc txtEndTime}"/>
					<TextBlock Text="{Binding EndTime, Converter={StaticResource timeSpanToStringConverter}}" FlowDirection="LeftToRight"/>
					<TextBlock Text="{Binding EndDate, Converter={StaticResource dateToPersianDateConverter}}"/>
				</StackPanel>
				<StackPanel>
					<TextBlock Text="{Loc txtDuration}"/>
					<TextBlock Text="{Binding Duration, Converter={StaticResource fullTimeSpanToStringConverter}}" FlowDirection="LeftToRight"/>
				</StackPanel>
				<StackPanel>
					<TextBlock Text="{Loc PPE_SumOfTP}"/>
					<TextBlock Text="{Binding BlockTargetPoint}"/>
				</StackPanel>
			</WrapPanel>
			<Border Visibility="{Binding Message.HasException, Converter={StaticResource booleanToVisibilityConverter}}" BorderBrush="#6EE2" Background="#2FFF" CornerRadius="2" BorderThickness="1" Margin="4">
				<TextBlock Text="{Binding Message.FullExceptionText}" Foreground="#EE2"/>
			</Border>
		</StatusBar>
		<!-- block data -->
		<DockPanel DockPanel.Dock="Top" DataContext="{Binding SelectedBlock}">
			<DockPanel.Visibility>
				<MultiBinding Converter="{StaticResource isEqualToVisibilityConverter2}">
					<Binding Path="StateStation"/>
					<Binding Path="SelectedStateStation"/>
				</MultiBinding>
			</DockPanel.Visibility>
			<!-- Start of Block -->
			<DockPanel DockPanel.Dock="Left">
				<!-- vertical title -->
				<Border DockPanel.Dock="Left" BorderBrush="{StaticResource taskDateStuffBorderBrush}" Background="{StaticResource taskDateStuffHeaderBackground}" BorderThickness="1" CornerRadius="5,0,0,5" Height="{Binding ElementName=startDateContents, Path=ActualHeight}" Margin="4,2,0,2">
					<TextBlock Text="زمان شروع برنامه" Style="{StaticResource VerticalHeader}"/>
				</Border>
				<!-- times and stuff -->
				<Border BorderBrush="{StaticResource taskDateStuffBorderBrush}" Background="{StaticResource taskDateStuffInsideBackground}" CornerRadius="0,5,5,0" BorderThickness="1" Margin="0,2,2,2" x:Name="startDateContents">
					<StackPanel>
						<CheckBox Margin="3" IsChecked="{Binding IsAutoStart}">
							<WrapPanel>
								<TextBlock Text="{Loc PPE_FirstEmptySpace}"/>
								<TextBlock Text="{Binding AutoStartDateTime, Converter={StaticResource dateTimeToCompactConverter}}" FlowDirection="LeftToRight" Margin="20,0"/>
							</WrapPanel>
						</CheckBox>
						<WrapPanel VerticalAlignment="Center" Visibility="{Binding IsAutoStart, Converter={StaticResource booleanToInvisibilityConverter}}" Style="{StaticResource Panel3DEffectStyle}">
							<TextBlock Text="{Loc txtDate}" Width="35" VerticalAlignment="Center" Foreground="{StaticResource TextBrush}"/>
							<cal:PersianDatePicker SelectedDate="{Binding StartDate}"/>
							<Button Margin="0,1" Content="{Loc txtToday}" Command="{Binding SelectTodayCommand}" Style="{StaticResource Button3DTextStyle}"/>
							<Button Margin="0,1" Content="{Loc txtTomorrow}" Command="{Binding SelectTomorrowCommand}" Style="{StaticResource Button3DTextStyle}"/>
							<TextBlock Margin="3,0,0,0" Text="{Loc txtTime}" Width="40" VerticalAlignment="Center" Foreground="{StaticResource TextBrush}"/>
							<CustomControls:TimeBox Time="{Binding StartTime, Mode=TwoWay}"/>
							<Button Margin="0,1" Content="{Loc PPE_StartOfThisHour}" Command="{Binding SelectThisHourCommand}" ToolTip="{Loc PPE_StartOfThisHourTooltip}" Style="{StaticResource Button3DTextStyle}"/>
							<Button Margin="0,1" Content="{Loc PPE_NextHour}" Command="{Binding AddOneHourCommand}" Style="{StaticResource Button3DTextStyle}"/>
							<Button Margin="0,1" Content="{Loc PPE_PreviousHour}" Command="{Binding SubtractOneHourCommand}" Style="{StaticResource Button3DTextStyle}"/>
						</WrapPanel>
					</StackPanel>
				</Border>
			</DockPanel>
		</DockPanel>
		<!-- task ranges -->
		<TabControl ItemsSource="{Binding SelectedBlock.TaskList}">
			<TabControl.Visibility>
				<MultiBinding Converter="{StaticResource isEqualToVisibilityConverter2}">
					<Binding Path="SelectedBlock.StateStation"/>
					<Binding Path="SelectedBlock.SelectedStateStation"/>
				</MultiBinding>
			</TabControl.Visibility>
			<!-- headers -->
			<TabControl.ItemContainerStyle>
				<Style TargetType="TabItem">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type TabItem}">
								<ControlTemplate.Resources>
									<SolidColorBrush x:Key="RedBrush" Color="#888"/>
									<SolidColorBrush x:Key="SolidBorderBrush" Color="#555" />
									<SolidColorBrush x:Key="GreenBrush" Color="#6BB" />
								</ControlTemplate.Resources>
								<Grid>
									<Border Name="Border" Margin="0,0,-4,0" Background="{StaticResource RedBrush}" BorderBrush="{StaticResource SolidBorderBrush}" BorderThickness="1,1,1,3" CornerRadius="2,12,0,0" >
										<ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="12,2,12,2" RecognizesAccessKey="True"/>
									</Border>
								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="IsSelected" Value="True">
										<Setter Property="Panel.ZIndex" Value="100" />
										<Setter TargetName="Border" Property="Background" Value="{StaticResource GreenBrush}" />
										<Setter TargetName="Border" Property="BorderThickness" Value="1,4,1,0" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
					<!-- each tab header ItemTemplate-->
					<Setter Property="HeaderTemplate">
						<Setter.Value>
							<DataTemplate>
								<DataTemplate.Resources>
									<!-- normal task -->
									<DataTemplate DataType="{x:Type ppevm:TaskEditorVm}">
										<!-- TabHeader for real Tasks -->
										<Border Background="#3000" BorderBrush="#8000" BorderThickness="2" CornerRadius="2" Margin="2" Padding="2">
											<DockPanel>
												<!-- task delete button and its confirmation -->
												<Grid Visibility="{Binding IsDurationFixed, Converter={StaticResource booleanToInvisibilityConverter}}" DockPanel.Dock="Left">
													<StackPanel Visibility="{Binding IsDeleteTaskMessageVisible, Converter={StaticResource booleanToVisibilityConverter}}">
														<Button Command="{Binding ConfirmDeleteTaskCommand}">
															<WrapPanel>
																<Image Style="{StaticResource Delete16Image}" VerticalAlignment="Center"/>
																<TextBlock Text="{Loc txtDelete}" Foreground="Crimson" VerticalAlignment="Center"/>
															</WrapPanel>
														</Button>
														<Button Command="{Binding CancelDeleteTaskCommand}" Content="{Loc txtCancel}"/>
													</StackPanel>
													<Button Command="{Binding DeleteTaskCommand}" Visibility="{Binding IsDeleteTaskMessageVisible, Converter={StaticResource booleanToInvisibilityConverter}}">
														<WrapPanel>
															<Image Style="{StaticResource Delete16Image}" VerticalAlignment="Center"/>
															<TextBlock Text="{Loc txtDelete}" Foreground="Crimson" VerticalAlignment="Center"/>
														</WrapPanel>
													</Button>
												</Grid>
												<!-- report info -->
												<TextBlock Text="{Binding ReportInfo}" TextWrapping="Wrap" HorizontalAlignment="Center" DockPanel.Dock="Top"
																	   Visibility="{Binding IsDurationFixed, Converter={StaticResource booleanToVisibilityConverter}}"/>
												<!-- Duration info -->
												<TextBlock Text="{Binding Duration, Converter={StaticResource fullTimeSpanToStringConverter}}" FlowDirection="LeftToRight" HorizontalAlignment="Center" DockPanel.Dock="Top"/>
												<!-- TaskTargetPoint info -->
												<DockPanel HorizontalAlignment="Center" DockPanel.Dock="Top">
													<Image DockPanel.Dock="Left" Style="{StaticResource TargetPointImage}"/>
													<TextBlock Text="{Binding TaskTargetPoint}"/>
												</DockPanel>
											</DockPanel>
										</Border>
									</DataTemplate>
									<!-- task holder -->
									<DataTemplate DataType="{x:Type ppevm:TaskEditorHolderVm}">
										<!-- TabHeader for TaskHolders -->
										<Grid>
											<Button Background="#3000" BorderBrush="GreenYellow" BorderThickness="2" Command="{Binding CreateNewTaskCommand}" Padding="12">
												<DockPanel>
													<Image DockPanel.Dock="Left" Style="{StaticResource Add16Image}"/>
													<TextBlock Text="{Loc txtNew}" Foreground="Black"/>
												</DockPanel>
											</Button>
										</Grid>
									</DataTemplate>
								</DataTemplate.Resources>
								<!-- auto select template -->
								<ContentPresenter Content="{Binding}"/>
							</DataTemplate>
						</Setter.Value>
					</Setter>
					<Setter Property="IsSelected" Value="{Binding IsSelected}"/>
				</Style>
			</TabControl.ItemContainerStyle>
			<!-- each tab ItemTemplate-->
			<TabControl.ContentTemplate>
				<DataTemplate>
					<DataTemplate.Resources>
						<!-- normal task -->
						<DataTemplate DataType="{x:Type ppevm:TaskEditorVm}">
							<local:TaskEditor DataContext="{Binding}"/>
						</DataTemplate>
						<!-- task holder -->
						<DataTemplate DataType="{x:Type ppevm:TaskEditorHolderVm}">
							<WrapPanel>
								<Button Background="#3000" BorderBrush="GreenYellow" BorderThickness="2" Command="{Binding CreateNewTaskCommand}" Padding="12">
									<DockPanel>
										<Image DockPanel.Dock="Left" Style="{StaticResource Add16Image}"/>
										<TextBlock Text="{Loc txtNew}" Foreground="Black"/>
									</DockPanel>
								</Button>
							</WrapPanel>
						</DataTemplate>
					</DataTemplate.Resources>
					<!-- auto select template -->
					<ContentPresenter Content="{Binding}"/>
				</DataTemplate>
			</TabControl.ContentTemplate>
		</TabControl>
	</DockPanel>

</UserControl>

<UserControl x:Class="Soheil.Views.PPAI.PPAI"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
			 xmlns:CustomControls="clr-namespace:Soheil.Controls.CustomControls;assembly=Soheil.Controls"
			 xmlns:Calendar="http://schemas.microsoft.com/wpf/2008/toolkit"
			TextBlock.Foreground="{StaticResource Foreground}"
             mc:Ignorable="d" 
             d:DesignHeight="600" d:DesignWidth="900">
	<UserControl.Resources>
		<Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
			<Setter Property="Foreground" Value="{StaticResource Foreground}"/>
			<Setter Property="BorderThickness" Value="0"/>
			<Setter Property="Margin" Value="1"/>
		</Style>
		<Style TargetType="ContextMenu" BasedOn="{StaticResource {x:Type ContextMenu}}">
			<Setter Property="DataContext" Value="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}"/>
		</Style>

		<Style x:Key="SliderRepeatButton" TargetType="RepeatButton">
			<Setter Property="SnapsToDevicePixels" Value="true" />
			<Setter Property="OverridesDefaultStyle" Value="true" />
			<Setter Property="IsTabStop" Value="false" />
			<Setter Property="Focusable" Value="false" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="RepeatButton">
						<Border Background="Transparent" Margin="6,0,0,0"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="SliderRepeatButton1" TargetType="RepeatButton">
			<Setter Property="SnapsToDevicePixels" Value="true" />
			<Setter Property="OverridesDefaultStyle" Value="true" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="RepeatButton">
						<Border Background="Transparent">
							<Grid>
								<Border SnapsToDevicePixels="True" Margin="0,-7.5,0,0"
								Background="{StaticResource HighlightBrush}" Height="4"/>
								<Border SnapsToDevicePixels="True"
								Background="{StaticResource HoverBrush}" Height="3"/>
							</Grid>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="SliderThumb" TargetType="Thumb">
			<Setter Property="SnapsToDevicePixels" Value="true" />
			<Setter Property="OverridesDefaultStyle" Value="true" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Thumb">
						<StackPanel Width="0">
							<Canvas>
								<Path Data="M 0 0 L 8 0 L 4 6 Z" Margin="-4,0,0,0" ClipToBounds="False" x:Name="flesh"
									  Stroke="YellowGreen" StrokeThickness="2" Fill="YellowGreen"/>
								<TextBlock Foreground="{StaticResource Foreground}" Text="{Binding Value, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Slider}}}" 
										   Margin="-4,17,0,0" HorizontalAlignment="Center" TextAlignment="Center"/>
								<Border Margin="-6,0,0,0" Background="Transparent" Height="30" Width="12" x:Name="grip"/>
							</Canvas>
						</StackPanel>
						<ControlTemplate.Triggers>
							<Trigger SourceName="grip" Property="IsMouseOver" Value="True">
								<Setter TargetName="flesh" Property="Fill" Value="Yellow"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<ControlTemplate x:Key="Slider" TargetType="Slider">
			<Grid Height="36" Background="{StaticResource BackgroundHighlighted}" Margin="0,1">
				<Border VerticalAlignment="Center" IsHitTestVisible="False" 
						Background="{StaticResource HorizontalNormalBrush}" 
						Height="3"/>
				<Track Grid.Row="1" x:Name="PART_Track">
					<Track.DecreaseRepeatButton>
						<RepeatButton Style="{StaticResource SliderRepeatButton1}"  Command="Slider.DecreaseLarge"/>
					</Track.DecreaseRepeatButton>
					<Track.Thumb>
						<Thumb Style="{StaticResource SliderThumb}"/>
					</Track.Thumb>
					<Track.IncreaseRepeatButton>
						<RepeatButton Style="{StaticResource SliderRepeatButton}" Command="Slider.IncreaseLarge"/>
					</Track.IncreaseRepeatButton>
				</Track>
				<TickBar
					VerticalAlignment="Top"
					Margin="0,11,0,0"
					Height="5" 
					Fill="{StaticResource HorizontalLightBrush}"
					SnapsToDevicePixels="True"
					IsHitTestVisible="False"
					Placement="Top" 
					Visibility="Visible"/>
				<Border 
					VerticalAlignment="Top"
					Margin="0,11,0,0"
					BorderBrush="{StaticResource HorizontalLightBrush}"
					IsHitTestVisible="False"
					BorderThickness="0,0,0,1"/>
			</Grid>
		</ControlTemplate>

		<Style x:Key="Horizontal_Slider" TargetType="Slider">
			<Setter Property="Focusable" Value="False"/>
			<Setter Property="SnapsToDevicePixels" Value="true" />
			<Setter Property="OverridesDefaultStyle" Value="true" />
			<Style.Triggers>
				<Trigger Property="Orientation" Value="Horizontal">
					<Setter Property="MinHeight" Value="21" />
					<Setter Property="MinWidth" Value="104" />
					<Setter Property="Template" Value="{StaticResource Slider}" />
				</Trigger>
			</Style.Triggers>
		</Style>
	</UserControl.Resources>



	<DockPanel>
		<Canvas DockPanel.Dock="Top" Panel.ZIndex="10">
			<TextBlock Text="{Binding FileName}" Canvas.Right="15" Canvas.Top="5" HorizontalAlignment="Right" FontStyle="Italic" IsHitTestVisible="False" 
					   Foreground="Black"/>
		</Canvas>

		<!-- toolbar -->
		<ToolBar DockPanel.Dock="Top" Panel.ZIndex="9">
			<Menu>
				<MenuItem Header="{Loc menuFile}">
					<MenuItem Header="{Loc menuNew}" Command="{Binding NewCommand}"/>
					<MenuItem Header="{Loc menuOpen}" Command="{Binding OpenCommand}"/>
					<MenuItem Header="{Loc menuSave}" Command="{Binding SaveCommand}"/>
					<MenuItem Header="{Loc menuSaveAs}" Command="{Binding SaveAsCommand}"/>
					<Separator Visibility="{Binding MRU.Count, Converter={StaticResource GreaterThanOrEqualtoVisibility}, ConverterParameter=1}"/>
					<MenuItem Header="{Binding MRU[0]}" Command="{Binding OpenMRUCommand}" CommandParameter="{Binding MRU[0]}" Visibility="{Binding MRU.Count, Converter={StaticResource GreaterThanOrEqualtoVisibility}, ConverterParameter=1}"/>
					<MenuItem Header="{Binding MRU[1]}" Command="{Binding OpenMRUCommand}" CommandParameter="{Binding MRU[1]}" Visibility="{Binding MRU.Count, Converter={StaticResource GreaterThanOrEqualtoVisibility}, ConverterParameter=2}"/>
					<MenuItem Header="{Binding MRU[2]}" Command="{Binding OpenMRUCommand}" CommandParameter="{Binding MRU[2]}" Visibility="{Binding MRU.Count, Converter={StaticResource GreaterThanOrEqualtoVisibility}, ConverterParameter=3}"/>
					<MenuItem Header="{Binding MRU[3]}" Command="{Binding OpenMRUCommand}" CommandParameter="{Binding MRU[3]}" Visibility="{Binding MRU.Count, Converter={StaticResource GreaterThanOrEqualtoVisibility}, ConverterParameter=4}"/>
					<MenuItem Header="{Binding MRU[4]}" Command="{Binding OpenMRUCommand}" CommandParameter="{Binding MRU[4]}" Visibility="{Binding MRU.Count, Converter={StaticResource GreaterThanOrEqualtoVisibility}, ConverterParameter=5}"/>
					<Separator/>
					<MenuItem Header="{Loc menuExportDataAs}" Command="{Binding SaveDataAsCommand}"/>
					<MenuItem Header="{Loc menuExportParametersAs}" Command="{Binding SaveParamsAsCommand}"/>
					<MenuItem Header="{Loc menuExportToText}" Command="{Binding SaveDataAndParamsCommand}"/>
				</MenuItem>
				<MenuItem Header="{Loc menuTasks}">
					<MenuItem Header="{Loc menuSaveAllAndRun}" Command="{Binding RunCommand}"/>
					<MenuItem Header="{Loc menuExportAsJobs}" Command="{Binding ExportJobsCommand}"/>
					<Separator/>
					<MenuItem Header="{Loc menuReloadDataFile}" Command="{Binding ReloadDataFileCommand}"/>
					<MenuItem Header="{Loc menuReloadDatabase}" Command="{Binding ReloadDatabaseCommand}"/>
					<Separator/>
					<MenuItem Header="{Loc menuPrintResults}" Command="{Binding PrintCommand}"/>
				</MenuItem>
				<MenuItem Header="{Loc menuOptions}">
					<MenuItem Header="{Loc menuRestoreMRU}" IsCheckable="True" IsChecked="{Binding OpenLastPrc}"/>
					<Separator/>
					<MenuItem Header="{Loc menuShowDisabledProducts}" IsCheckable="True" x:Name="showDisabled" IsChecked="True"/>
					<MenuItem Header="{Loc menuShowPeriodSettings}" IsCheckable="True" x:Name="showPeriods"/>
					<MenuItem Header="{Loc menuShowAISettings}" IsCheckable="True" x:Name="showParams" IsChecked="True"/>
					<Separator/>
					<MenuItem Header="{Loc menuCloseAIConsole}" IsCheckable="True" IsChecked="{Binding AutoCloseConsole}"/>
				</MenuItem>
			</Menu>
		</ToolBar>

		<!-- settingo righto -->
		<Border DockPanel.Dock="Right" Padding="5" Background="{StaticResource BackgroundNormal}" Panel.ZIndex="2">
			<Border.Effect>
				<DropShadowEffect ShadowDepth="0" BlurRadius="16"/>
			</Border.Effect>
			<DockPanel>
				<UniformGrid DockPanel.Dock="Bottom" Rows="1">
					<Button Content="{Loc menuSaveAllAndRun}" Command="{Binding RunCommand}" Margin="2"/>
					<Button Content="{Loc menuExportAsJobs}" Command="{Binding ExportJobsCommand}" Margin="2" Padding="25,5"/>
				</UniformGrid>

				<Separator DockPanel.Dock="Bottom" Margin="5"/>
				
				<!-- periods -->
				<Canvas DockPanel.Dock="Bottom" HorizontalAlignment="Right" Panel.ZIndex="19">
					<Expander IsExpanded="{Binding ElementName=showPeriods, Path=IsChecked}" Canvas.Right="6" Canvas.Bottom="0">
						<Expander.Header>
							<DockPanel>
								<Image Style="{StaticResource PeriodImage}"/>
								<TextBlock Text="{Loc txtPeriodsSettings}" VerticalAlignment="Center" Margin="5,0"/>
							</DockPanel>
						</Expander.Header>
						<DataGrid AutoGenerateColumns="False" ItemsSource="{Binding Periods}" Height="100"
						  CanUserAddRows="False" CanUserDeleteRows="False" CanUserReorderColumns="False" CanUserResizeColumns="False" CanUserResizeRows="False" CanUserSortColumns="False">
							<DataGrid.Columns>
								<DataGridTextColumn Header="{Loc txtPeriodName}" Binding="{Binding Name}" Width="auto" IsReadOnly="True"/>
								<DataGridTemplateColumn Header="{Loc txtStartDate}">
									<DataGridTemplateColumn.CellTemplate>
										<DataTemplate>
											<TextBlock Text="{Binding StartDate, StringFormat=dd/MM/yyyy}"/>
										</DataTemplate>
									</DataGridTemplateColumn.CellTemplate>
									<DataGridTemplateColumn.CellEditingTemplate>
										<DataTemplate>
											<Calendar:DatePicker SelectedDate="{Binding StartDate}" DisplayDate="{Binding StartDate}"/>
										</DataTemplate>
									</DataGridTemplateColumn.CellEditingTemplate>
								</DataGridTemplateColumn>
								<DataGridTemplateColumn Header="{Loc txtEndDate}">
									<DataGridTemplateColumn.CellTemplate>
										<DataTemplate>
											<TextBlock Text="{Binding EndDate, StringFormat=dd/MM/yyyy}"/>
										</DataTemplate>
									</DataGridTemplateColumn.CellTemplate>
									<DataGridTemplateColumn.CellEditingTemplate>
										<DataTemplate>
											<Calendar:DatePicker SelectedDate="{Binding EndDate}" DisplayDate="{Binding EndDate}"/>
										</DataTemplate>
									</DataGridTemplateColumn.CellEditingTemplate>
								</DataGridTemplateColumn>
								<DataGridTextColumn Header="{Loc txtDurationDays}" Binding="{Binding Duration}"/>
								<DataGridTextColumn Header="{Loc txtTotalBudget}" Binding="{Binding TotalBudget}"/>
								<DataGridTextColumn Header="{Loc txtTotalCapacity}" Binding="{Binding TotalCapacity}"/>
							</DataGrid.Columns>
						</DataGrid>
					</Expander>
				</Canvas>

				<!-- AI params settings -->
				<Border DataContext="{Binding Params}" Visibility="{Binding ElementName=showParams, Path=IsChecked, Converter={StaticResource booleanToVisibilityConverter}}" Padding="5" Margin="2,0,0,0" DockPanel.Dock="Right">

					<DockPanel>
						<DockPanel LastChildFill="False" DockPanel.Dock="Top">
							<Image Style="{StaticResource PriceImage}" Height="16"/>
							<TextBlock Text="{Loc txtAISettings}" VerticalAlignment="Center"/>
							<Button Content="Hide" DockPanel.Dock="Right" Click="CloseAISettingButton_Click"/>
						</DockPanel>
						<Separator DockPanel.Dock="Top" Margin="5"/>
						<ScrollViewer HorizontalScrollBarVisibility="Disabled" Padding="5" VerticalScrollBarVisibility="Auto" FlowDirection="LeftToRight">
							<UniformGrid Columns="2" MaxWidth="300" VerticalAlignment="Top">

								<CustomControls:ParameterLabel Tag="Number of Runs:" ToolTip="maxRuns - Number of times the algorithm runs"/>
								<Slider Style="{StaticResource Horizontal_Slider}" TickFrequency="10" SmallChange="1" LargeChange="1"
									Minimum="1" Maximum="100" Value="{Binding maxRuns, UpdateSourceTrigger=PropertyChanged}"/>

								<CustomControls:ParameterLabel Tag="Measurement Matrix Size:" ToolTip="mmSize - Size of Measurement Matrix"/>
								<Slider Style="{StaticResource Horizontal_Slider}" TickFrequency="20" SmallChange="1" LargeChange="10"
									Minimum="1" Maximum="200" Value="{Binding mmSize, UpdateSourceTrigger=PropertyChanged}"/>

								<CustomControls:ParameterLabel Tag="Memory Size:" ToolTip="memorySize - Size of Memory"/>
								<Slider Style="{StaticResource Horizontal_Slider}" TickFrequency="100" SmallChange="10" LargeChange="100"
									Minimum="0" Maximum="1000" Value="{Binding memorySize, UpdateSourceTrigger=PropertyChanged}"/>

								<Separator Margin="50,0,-100,0"/>
								<Canvas/>

								<CustomControls:ParameterLabel Tag="Time limit: (s)">
									<CustomControls:ParameterLabel.ToolTip>
										<StackPanel>
											<TextBlock Text="timeLimit - Time limit for each zoom (in seconds)"/>
											<TextBlock Text="Set value to 0 to ignore this parameter"/>
										</StackPanel>
									</CustomControls:ParameterLabel.ToolTip>
								</CustomControls:ParameterLabel>
								<CustomControls:NumericBox JumpCount="60" Value="{Binding timeLimit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

								<CustomControls:ParameterLabel Tag="Idle Count:">
									<CustomControls:ParameterLabel.ToolTip>
										<StackPanel>
											<TextBlock Text="idleCount - Maximum number of DFS tries with no improvement"/>
											<TextBlock Text="Set value to 0 to ignore this parameter"/>
										</StackPanel>
									</CustomControls:ParameterLabel.ToolTip>
								</CustomControls:ParameterLabel>
								<CustomControls:NumericBox JumpCount="100" Value="{Binding idleCount, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

								<CustomControls:ParameterLabel Tag="Maximum Number of DFSs:">
									<CustomControls:ParameterLabel.ToolTip>
										<StackPanel>
											<TextBlock Text="maxDfss - Maximum number of DFS tries"/>
											<TextBlock Text="Set value to 0 to ignore this parameter"/>
										</StackPanel>
									</CustomControls:ParameterLabel.ToolTip>
								</CustomControls:ParameterLabel>
								<CustomControls:NumericBox JumpCount="100" Value="{Binding maxDfss, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

								<Separator Margin="50,0,-100,0"/>
								<Canvas/>

								<CustomControls:ParameterLabel Tag="Initial Population:">
									<CustomControls:ParameterLabel.ToolTip>
										<StackPanel>
											<TextBlock Text="maxInitPop - Number of initial population"/>
											<TextBlock Text="Must be greater than or equal to mmSize"/>
										</StackPanel>
									</CustomControls:ParameterLabel.ToolTip>
								</CustomControls:ParameterLabel>
								<CustomControls:NumericBox JumpCount="10" Value="{Binding maxInitPop, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>


								<CustomControls:ParameterLabel Tag="Translation Function:" ToolTip="translationFunction - Converts MM index to Pi Value"/>
								<ComboBox VerticalAlignment="Center" SelectedIndex="{Binding translationFunction}" MaxWidth="170">
									<ComboBox.Resources>
										<Style TargetType="TextBlock">
											<Setter Property="TextWrapping" Value="Wrap"/>
											<Setter Property="VerticalAlignment" Value="Center"/>
											<Setter Property="Height" Value="25"/>
										</Style>
									</ComboBox.Resources>
									<TextBlock>1: Constant transform</TextBlock>
									<TextBlock>2: Linear transform</TextBlock>
									<TextBlock>3: Sigmoid transform</TextBlock>
								</ComboBox>
							</UniformGrid>
						</ScrollViewer>
					</DockPanel>
				</Border>

				<DockPanel MaxWidth="400">
					<DockPanel DockPanel.Dock="Top">
						<Image Style="{StaticResource PricingImage}"/>
						<TextBlock Text="{Loc txtPricing}" Margin="5,0" VerticalAlignment="Center"/>
						<TextBlock Text="{Binding SelectedProduct.Name}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="5,0" Foreground="Gray"/>
					</DockPanel>

					<!-- pricings -->
					<Border BorderBrush="Black" BorderThickness="1,1,1,0" DockPanel.Dock="Top">
						<DataGrid VerticalAlignment="Top" ColumnWidth="*">
							<DataGrid.Columns>
								<DataGridTemplateColumn Header="{Loc txtPricePoint}" CanUserReorder="False" CanUserResize="False" CanUserSort="False"/>
								<DataGridTemplateColumn Header="{Loc txtMinDemand}" CanUserReorder="False" CanUserResize="False" CanUserSort="False"/>
								<DataGridTemplateColumn Header="{Loc txtMaxDemand}" CanUserReorder="False" CanUserResize="False" CanUserSort="False"/>
							</DataGrid.Columns>
						</DataGrid>
					</Border>
					<!-- pricing group -->
					<ItemsControl ItemsSource="{Binding SelectedProduct.Periods}" HorizontalContentAlignment="Stretch" BorderBrush="Black" BorderThickness="1" 
							  Background="{StaticResource Background}" MinWidth="350">
						<ItemsControl.ItemTemplate>
							<DataTemplate>
								<Border BorderBrush="Black" BorderThickness="0,0,0,1" Padding="0,0,0,5">
									<Grid>
										<Border Background="{StaticResource HeaderActiveBrush}" IsHitTestVisible="False" Margin="0,-2,0,-4"
											Visibility="{Binding ElementName=priceGroupContextMenu, Path=IsOpen,
											Converter={StaticResource booleanToVisibilityConverter}}"/>
										<StackPanel>
											<Grid Background="{StaticResource HeaderBackground}">
												<DockPanel Margin="2">
													<Image Style="{StaticResource Period16Image}"/>
													<TextBlock Text="{Binding Name}" Background="Transparent" Margin="5,0"/>
													<TextBlock Text="Right-Click for more options" Foreground="Gray" Margin="5,0" FontSize="10" FontStyle="Italic" Opacity="0" x:Name="tip" HorizontalAlignment="Right" VerticalAlignment="Center" TextWrapping="Wrap"/>
												</DockPanel>
												<Grid.ContextMenu>
													<ContextMenu x:Name="priceGroupContextMenu">
														<MenuItem Header="Add New Price" Command="{Binding AddNewCommand}" Height="28">
															<MenuItem.Icon>
																<Image Style="{StaticResource PriceAddImage}" Margin="-4"/>
															</MenuItem.Icon>
														</MenuItem>
														<Separator/>
														<MenuItem Header="Copy Period Prices" Command="{Binding CopyCommand}" Height="28">
															<MenuItem.Icon>
																<Image Style="{StaticResource PeriodCopyImage}" Margin="-4"/>
															</MenuItem.Icon>
														</MenuItem>
														<MenuItem Header="Paste Prices (Append)" Command="{Binding AppendCommand}" Height="28">
															<MenuItem.Icon>
																<Image Style="{StaticResource PeriodPasteImage}" Margin="-4"/>
															</MenuItem.Icon>
														</MenuItem>
														<MenuItem Header="Paste Prices (Overwrite)" Command="{Binding OverwriteCommand}" Height="28">
															<MenuItem.Icon>
																<Image Style="{StaticResource PeriodPasteImage}" Margin="-4"/>
															</MenuItem.Icon>
														</MenuItem>
														<Separator/>
														<MenuItem Header="Delete Period Prices" Command="{Binding DeleteCommand}" Height="28">
															<MenuItem.Icon>
																<Image Style="{StaticResource PeriodDeleteImage}" Margin="-4"/>
															</MenuItem.Icon>
														</MenuItem>
													</ContextMenu>
												</Grid.ContextMenu>
												<Grid.Triggers>
													<EventTrigger RoutedEvent="MouseEnter">
														<BeginStoryboard>
															<Storyboard Duration="0:0:.4">
																<DoubleAnimation Storyboard.TargetName="tip" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:.4"/>
															</Storyboard>
														</BeginStoryboard>
													</EventTrigger>
													<EventTrigger RoutedEvent="MouseLeave">
														<BeginStoryboard>
															<Storyboard Duration="0:0:1">
																<DoubleAnimation Storyboard.TargetName="tip" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:1"/>
															</Storyboard>
														</BeginStoryboard>
													</EventTrigger>
												</Grid.Triggers>
											</Grid>
											<!-- prices -->
											<ItemsControl ItemsSource="{Binding Prices}">
												<ItemsControl.ItemTemplate>
													<DataTemplate>
														<Grid Background="Transparent">
															<Grid.ContextMenu>
																<ContextMenu x:Name="priceContextMenu" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
																	<MenuItem Header="Insert New Price (Before)" Height="28"
																	  Command="{Binding Period.AddNewCommand}"
																	  CommandParameter="{Binding}">
																		<MenuItem.Icon>
																			<Image Style="{StaticResource PriceAddImage}" Margin="-4"/>
																		</MenuItem.Icon>
																	</MenuItem>
																	<Separator/>
																	<MenuItem Header="Copy Price" Height="28"
																	  Command="{Binding Period.CopyCommand}"
																	  CommandParameter="{Binding}">
																		<MenuItem.Icon>
																			<Image Style="{StaticResource PriceCopyImage}" Margin="-4"/>
																		</MenuItem.Icon>
																	</MenuItem>
																	<MenuItem Header="Paste Price (Before)" Height="28"
																	  Command="{Binding Period.AppendCommand}"
																	  CommandParameter="{Binding}">
																		<MenuItem.Icon>
																			<Image Style="{StaticResource PricePasteImage}" Margin="-4"/>
																		</MenuItem.Icon>
																	</MenuItem>
																	<MenuItem Header="Paste Price (Overwrite)" Height="28"
																	  Command="{Binding Period.OverwriteCommand}"
																	  CommandParameter="{Binding}">
																		<MenuItem.Icon>
																			<Image Style="{StaticResource PricePasteImage}" Margin="-4"/>
																		</MenuItem.Icon>
																	</MenuItem>
																	<Separator/>
																	<MenuItem Header="Delete Price" Height="28"
																	  Command="{Binding Period.DeleteCommand}"
																	  CommandParameter="{Binding}">
																		<MenuItem.Icon>
																			<Image Style="{StaticResource PriceDeleteImage}" Margin="-4"/>
																		</MenuItem.Icon>
																	</MenuItem>
																	<Separator/>
																	<MenuItem Header="Move Item Up" Height="28" Command="{Binding MoveUpCommand}">
																		<MenuItem.Icon>
																			<Image Style="{StaticResource PriceUpImage}" Margin="-4"/>
																		</MenuItem.Icon>
																	</MenuItem>
																	<MenuItem Header="Move Item Down" Height="28" Command="{Binding MoveDownCommand}">
																		<MenuItem.Icon>
																			<Image Style="{StaticResource PriceDownImage}" Margin="-4"/>
																		</MenuItem.Icon>
																	</MenuItem>
																</ContextMenu>
															</Grid.ContextMenu>

															<!-- Price row -->
															<Border Background="{StaticResource SelectedItemBrush}"
														Visibility="{Binding ElementName=priceContextMenu, Path=IsOpen,
														Converter={StaticResource booleanToVisibilityConverter}}"/>
															<UniformGrid Rows="1">
																<UniformGrid.Resources>
																	<Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
																		<Setter Property="ContextMenu" Value="{Binding RelativeSource={RelativeSource AncestorType=Grid}, Path=ContextMenu}"/>
																	</Style>
																</UniformGrid.Resources>
																<TextBox Text="{Binding Fee, StringFormat={}{0:N0}, UpdateSourceTrigger=PropertyChanged}"/>
																<TextBox Text="{Binding MinDemand, StringFormat={}{0:N0}, UpdateSourceTrigger=PropertyChanged}"/>
																<TextBox Text="{Binding MaxDemand, StringFormat={}{0:N0}, UpdateSourceTrigger=PropertyChanged}"/>
															</UniformGrid>
														</Grid>
													</DataTemplate>
												</ItemsControl.ItemTemplate>
											</ItemsControl>
										</StackPanel>
									</Grid>
								</Border>
							</DataTemplate>
						</ItemsControl.ItemTemplate>
					</ItemsControl>
				</DockPanel>
			</DockPanel>
		</Border>

		<!-- result -->
		<Border DockPanel.Dock="Bottom" Panel.ZIndex="3" Background="{StaticResource BackgroundSelected}" Padding="5" BorderBrush="Black" BorderThickness="0,0,1,0">
			<Expander Header="{Loc txtResults}" IsExpanded="{Binding ShowResults}">
				<DataGrid AutoGenerateColumns="False" ItemsSource="{Binding Results}" CanUserAddRows="False" CanUserDeleteRows="False" CanUserResizeRows="False">
					<DataGrid.Resources>
						<Style TargetType="Border">
							<Setter Property="BorderBrush" Value="#2000"/>
						</Style>
						<Style TargetType="TextBlock">
							<Setter Property="HorizontalAlignment" Value="Center"/>
						</Style>
						<Style TargetType="TextBox">
							<Setter Property="BorderThickness" Value="0"/>
							<Setter Property="Margin" Value="1,0"/>
						</Style>
					</DataGrid.Resources>

					<DataGrid.Columns>
						<DataGridCheckBoxColumn Header="{Loc txtJob}" Binding="{Binding Selected}" Width="auto" MinWidth="50"/>
						<DataGridTextColumn Header="{Loc txtProduct}" Binding="{Binding Name}" IsReadOnly="True" Width="auto" MinWidth="100"/>
						<!-- result price -->
						<DataGridTemplateColumn CanUserResize="False" Width="311">
							<DataGridTemplateColumn.Header>
								<DockPanel Margin="0,0,0,-3" Width="300">
									<Border BorderThickness="0,0,0,1" DockPanel.Dock="Top">
										<TextBlock Text="{Loc txtResultPrice}"/>
									</Border>
									<UniformGrid Rows="1" VerticalAlignment="Bottom">
										<Border BorderThickness="0,0,1,0">
											<TextBlock Text="{Loc txtPeriod1}"/>
										</Border>
										<Border BorderThickness="0,0,1,0">
											<TextBlock Text="{Loc txtPeriod2}"/>
										</Border>
										<Border BorderThickness="0,0,1,0">
											<TextBlock Text="{Loc txtPeriod3}"/>
										</Border>
										<TextBlock Text="{Loc txtPeriod4}"/>
									</UniformGrid>
								</DockPanel>
							</DataGridTemplateColumn.Header>
							<DataGridTemplateColumn.CellTemplate>
								<DataTemplate>
									<UniformGrid Rows="1" VerticalAlignment="Bottom">
										<Border BorderThickness="0,0,1,0">
											<TextBox Text="{Binding Price[0]}"/>
										</Border>
										<Border BorderThickness="0,0,1,0">
											<TextBox Text="{Binding Price[1]}"/>
										</Border>
										<Border BorderThickness="0,0,1,0">
											<TextBox Text="{Binding Price[2]}"/>
										</Border>
										<TextBox Text="{Binding Price[3]}"/>
									</UniformGrid>
								</DataTemplate>
							</DataGridTemplateColumn.CellTemplate>
						</DataGridTemplateColumn>
						<!-- result production -->
						<DataGridTemplateColumn CanUserResize="False" Width="311">
							<DataGridTemplateColumn.Header>
								<DockPanel Margin="0,0,0,-3" Width="300">
									<Border BorderThickness="0,0,0,1" DockPanel.Dock="Top">
										<TextBlock Text="{Loc txtResultProduction}"/>
									</Border>
									<UniformGrid Rows="1" VerticalAlignment="Bottom">
										<Border BorderThickness="0,0,1,0">
											<TextBlock Text="{Loc txtPeriod1}"/>
										</Border>
										<Border BorderThickness="0,0,1,0">
											<TextBlock Text="{Loc txtPeriod2}"/>
										</Border>
										<Border BorderThickness="0,0,1,0">
											<TextBlock Text="{Loc txtPeriod3}"/>
										</Border>
										<TextBlock Text="{Loc txtPeriod4}"/>
									</UniformGrid>
								</DockPanel>
							</DataGridTemplateColumn.Header>
							<DataGridTemplateColumn.CellTemplate>
								<DataTemplate>
									<UniformGrid Rows="1" VerticalAlignment="Bottom">
										<Border BorderThickness="0,0,1,0">
											<TextBox Text="{Binding Production[0]}"/>
										</Border>
										<Border BorderThickness="0,0,1,0">
											<TextBox Text="{Binding Production[1]}"/>
										</Border>
										<Border BorderThickness="0,0,1,0">
											<TextBox Text="{Binding Production[2]}"/>
										</Border>
										<TextBox Text="{Binding Production[3]}"/>
									</UniformGrid>
								</DataTemplate>
							</DataGridTemplateColumn.CellTemplate>
						</DataGridTemplateColumn>
						<!-- result sales -->
						<DataGridTemplateColumn CanUserResize="False" Width="311">
							<DataGridTemplateColumn.Header>
								<DockPanel Margin="0,0,0,-3" Width="300">
									<Border BorderThickness="0,0,0,1" DockPanel.Dock="Top">
										<TextBlock Text="{Loc txtResultSales}"/>
									</Border>
									<UniformGrid Rows="1" VerticalAlignment="Bottom">
										<Border BorderThickness="0,0,1,0">
											<TextBlock Text="{Loc txtPeriod1}"/>
										</Border>
										<Border BorderThickness="0,0,1,0">
											<TextBlock Text="{Loc txtPeriod2}"/>
										</Border>
										<Border BorderThickness="0,0,1,0">
											<TextBlock Text="{Loc txtPeriod3}"/>
										</Border>
										<TextBlock Text="{Loc txtPeriod4}"/>
									</UniformGrid>
								</DockPanel>
							</DataGridTemplateColumn.Header>
							<DataGridTemplateColumn.CellTemplate>
								<DataTemplate>
									<UniformGrid Rows="1" VerticalAlignment="Bottom">
										<Border BorderThickness="0,0,1,0">
											<TextBox Text="{Binding Sales[0]}"/>
										</Border>
										<Border BorderThickness="0,0,1,0">
											<TextBox Text="{Binding Sales[1]}"/>
										</Border>
										<Border BorderThickness="0,0,1,0">
											<TextBox Text="{Binding Sales[2]}"/>
										</Border>
										<TextBox Text="{Binding Sales[3]}"/>
									</UniformGrid>
								</DataTemplate>
							</DataGridTemplateColumn.CellTemplate>
						</DataGridTemplateColumn>
						<DataGridTextColumn Header="{Loc txtProductionCost}" Binding="{Binding ProductionCost}" IsReadOnly="True" Width="auto" MinWidth="100"/>
						<DataGridTextColumn Header="{Loc txtHoldingCost}" Binding="{Binding HoldingCost}" IsReadOnly="True" Width="auto" MinWidth="100"/>
						<DataGridTextColumn Header="{Loc txtLostSalesCost}" Binding="{Binding PenaltyCost}" IsReadOnly="True" Width="auto" MinWidth="100"/>
						<DataGridTextColumn Header="{Loc txtRevenue}" Binding="{Binding Revenue}" IsReadOnly="True" Width="auto" MinWidth="100"/>
						<DataGridTextColumn Header="{Loc txtProfit}" Binding="{Binding Profit}" IsReadOnly="True" Width="auto" MinWidth="100"/>
					</DataGrid.Columns>

					<!-- result group -->
					<DataGrid.GroupStyle>
						<GroupStyle>
							<GroupStyle.ContainerStyle>
								<Style TargetType="{x:Type GroupItem}">
									<Setter Property="Template">
										<Setter.Value>
											<ControlTemplate TargetType="{x:Type GroupItem}">
												<Expander Header="{Binding Name}">
													<ItemsPresenter />
												</Expander>
											</ControlTemplate>
										</Setter.Value>
									</Setter>
								</Style>
							</GroupStyle.ContainerStyle>
						</GroupStyle>
					</DataGrid.GroupStyle>
				</DataGrid>
			</Expander>
		</Border>

		<!-- main -->
		<Border Margin="5,0,0,0">
			<DataGrid AutoGenerateColumns="False" ItemsSource="{Binding Products}" SelectedItem="{Binding SelectedProduct}" CanUserAddRows="False" CanUserDeleteRows="False" CanUserResizeRows="False" VerticalAlignment="Top" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
				<DataGrid.Resources>
					<Style TargetType="Border">
						<Setter Property="BorderBrush" Value="#2000"/>
					</Style>
					<Style TargetType="TextBlock">
						<Setter Property="HorizontalAlignment" Value="Center"/>
						<Setter Property="TextWrapping" Value="Wrap"/>
					</Style>

					<ContextMenu x:Key="contextMenu">
						<MenuItem Header="Copy" Command="{Binding CopyCommand}" Height="28">
							<MenuItem.Icon>
								<Image Style="{StaticResource PricingCopyImage}" Margin="-4"/>
							</MenuItem.Icon>
						</MenuItem>
						<Separator/>
						<MenuItem Header="Paste Values" Command="{Binding PasteCommand}" Height="28">
							<MenuItem.Icon>
								<Rectangle Stroke="Black" Height="16" Width="24" Fill="White" Margin="-4"/>
							</MenuItem.Icon>
						</MenuItem>
						<MenuItem Header="Paste Pricings (Append)" Command="{Binding AppendPricingCommand}" Height="28">
							<MenuItem.Icon>
								<Image Style="{StaticResource PricingPasteImage}" Margin="-4"/>
							</MenuItem.Icon>
						</MenuItem>
						<MenuItem Header="Paste Pricings (Overwrite)" Command="{Binding OverwritePricingCommand}" Height="28">
							<MenuItem.Icon>
								<Image Style="{StaticResource PricingPasteImage}" Margin="-4"/>
							</MenuItem.Icon>
						</MenuItem>
						<Separator/>
						<MenuItem Header="Reset Pricings" Command="{Binding DeleteCommand}" Height="28">
							<MenuItem.Icon>
								<Image Style="{StaticResource PricingDeleteImage}" Margin="-4"/>
							</MenuItem.Icon>
						</MenuItem>
						<MenuItem Header="Disable Product" Command="{Binding ExcludeCommand}" Height="28">
							<MenuItem.Icon>
								<TextBlock Background="Black" Foreground="White" Text="0" FontSize="18" FontWeight="Bold" Width="24" Height="24" Margin="-4" TextAlignment="Center" VerticalAlignment="Center"/>
							</MenuItem.Icon>
						</MenuItem>
					</ContextMenu>
				</DataGrid.Resources>

				<DataGrid.Columns>
					<DataGridTextColumn Header="{Loc txtProduct}" Binding="{Binding Name}" IsReadOnly="True" Width="auto" MinWidth="100"/>
					<DataGridTextColumn Binding="{Binding FinishedCost}" Width="100">
						<DataGridTextColumn.Header>
							<TextBlock Text="{Loc txtFinishedCost}"/>
						</DataGridTextColumn.Header>
					</DataGridTextColumn>
					<DataGridTextColumn Binding="{Binding InventoryCost}" Width="100">
						<DataGridTextColumn.Header>
							<TextBlock Text="{Loc txtInventoryCost}"/>
						</DataGridTextColumn.Header>
					</DataGridTextColumn>
					<DataGridTextColumn Binding="{Binding LostSaleCost}" Width="100">
						<DataGridTextColumn.Header>
							<TextBlock Text="{Loc txtLostSalesCost}" Width="90"/>
						</DataGridTextColumn.Header>
					</DataGridTextColumn>
					<DataGridTextColumn Binding="{Binding Inventory}" Width="100">
						<DataGridTextColumn.Header>
							<TextBlock Text="{Loc txtInventory}"/>
						</DataGridTextColumn.Header>
					</DataGridTextColumn>
					<DataGridTextColumn Binding="{Binding SpaceCoef}" Width="100">
						<DataGridTextColumn.Header>
							<TextBlock Text="{Loc txtSpaceCoef}"/>
						</DataGridTextColumn.Header>
					</DataGridTextColumn>

					<DataGridTemplateColumn CanUserResize="False" Width="311">
						<DataGridTemplateColumn.Header>
							<DockPanel Margin="0,0,0,-3" Width="300">
								<Border BorderThickness="0,0,0,1" DockPanel.Dock="Top">
									<TextBlock Text="{Loc txtMaxProduction}"/>
								</Border>
								<UniformGrid Rows="1" VerticalAlignment="Bottom">
									<Border BorderThickness="0,0,1,0">
										<TextBlock Text="{Loc txtPeriod1}"/>
									</Border>
									<Border BorderThickness="0,0,1,0">
										<TextBlock Text="{Loc txtPeriod2}"/>
									</Border>
									<Border BorderThickness="0,0,1,0">
										<TextBlock Text="{Loc txtPeriod3}"/>
									</Border>
									<TextBlock Text="{Loc txtPeriod4}"/>
								</UniformGrid>
							</DockPanel>
						</DataGridTemplateColumn.Header>
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<UniformGrid Rows="1" VerticalAlignment="Bottom">
									<Border BorderThickness="0,0,1,0">
										<TextBox Text="{Binding Periods[0].MaxProduction, UpdateSourceTrigger=PropertyChanged}"/>
									</Border>
									<Border BorderThickness="0,0,1,0">
										<TextBox Text="{Binding Periods[1].MaxProduction, UpdateSourceTrigger=PropertyChanged}"/>
									</Border>
									<Border BorderThickness="0,0,1,0">
										<TextBox Text="{Binding Periods[2].MaxProduction, UpdateSourceTrigger=PropertyChanged}"/>
									</Border>
									<TextBox Text="{Binding Periods[3].MaxProduction, UpdateSourceTrigger=PropertyChanged}"/>
								</UniformGrid>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>
				</DataGrid.Columns>
				<DataGrid.RowStyle>
					<Style TargetType="DataGridRow">
						<Setter Property="ContextMenu" Value="{StaticResource contextMenu}"/>
						<Setter Property="Opacity" Value="1"/>
						<Setter Property="Visibility" Value="Visible"/>
						<Style.Triggers>
							<DataTrigger Binding="{Binding IsActive}" Value="False">
								<Setter Property="Opacity" Value=".33"/>
							</DataTrigger>
							<MultiDataTrigger>
								<MultiDataTrigger.Conditions>
									<Condition Binding="{Binding IsActive}" Value="False"/>
									<Condition Binding="{Binding ElementName=showDisabled, Path=IsChecked}" Value="False"/>
								</MultiDataTrigger.Conditions>
								<MultiDataTrigger.Setters>
									<Setter Property="Visibility" Value="Collapsed"/>
								</MultiDataTrigger.Setters>
							</MultiDataTrigger>
						</Style.Triggers>
					</Style>
				</DataGrid.RowStyle>
				<DataGrid.GroupStyle>
					<GroupStyle>
						<GroupStyle.ContainerStyle>
							<Style TargetType="{x:Type GroupItem}">
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type GroupItem}">
											<Expander Header="{Binding Name}">
												<ItemsPresenter />
											</Expander>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>
						</GroupStyle.ContainerStyle>
					</GroupStyle>
				</DataGrid.GroupStyle>
			</DataGrid>
		</Border>
	</DockPanel>

</UserControl>

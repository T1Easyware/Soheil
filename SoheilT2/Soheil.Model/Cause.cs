//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class Cause
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual byte Code
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual byte Status
        {
            get { return _status; }
            set { _status = value; }
        }
        private byte _status = 1;
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }
    
        public virtual byte Level
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<StoppageReport> StoppageReports
        {
            get
            {
                if (_stoppageReports == null)
                {
                    var newCollection = new FixupCollection<StoppageReport>();
                    newCollection.CollectionChanged += FixupStoppageReports;
                    _stoppageReports = newCollection;
                }
                return _stoppageReports;
            }
            set
            {
                if (!ReferenceEquals(_stoppageReports, value))
                {
                    var previousValue = _stoppageReports as FixupCollection<StoppageReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoppageReports;
                    }
                    _stoppageReports = value;
                    var newValue = value as FixupCollection<StoppageReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoppageReports;
                    }
                }
            }
        }
        private ICollection<StoppageReport> _stoppageReports;
    
        public virtual ICollection<Cause> Children
        {
            get
            {
                if (_children == null)
                {
                    var newCollection = new FixupCollection<Cause>();
                    newCollection.CollectionChanged += FixupChildren;
                    _children = newCollection;
                }
                return _children;
            }
            set
            {
                if (!ReferenceEquals(_children, value))
                {
                    var previousValue = _children as FixupCollection<Cause>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildren;
                    }
                    _children = value;
                    var newValue = value as FixupCollection<Cause>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildren;
                    }
                }
            }
        }
        private ICollection<Cause> _children;
    
        public virtual Cause Parent
        {
            get { return _parent; }
            set
            {
                if (!ReferenceEquals(_parent, value))
                {
                    var previousValue = _parent;
                    _parent = value;
                    FixupParent(previousValue);
                }
            }
        }
        private Cause _parent;

        #endregion

        #region Association Fixup
    
        private void FixupParent(Cause previousValue)
        {
            if (previousValue != null && previousValue.Children.Contains(this))
            {
                previousValue.Children.Remove(this);
            }
    
            if (Parent != null)
            {
                if (!Parent.Children.Contains(this))
                {
                    Parent.Children.Add(this);
                }
            }
        }
    
        private void FixupStoppageReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoppageReport item in e.NewItems)
                {
                    item.Cause = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoppageReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Cause, this))
                    {
                        item.Cause = null;
                    }
                }
            }
        }
    
        private void FixupChildren(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Cause item in e.NewItems)
                {
                    item.Parent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Cause item in e.OldItems)
                {
                    if (ReferenceEquals(item.Parent, this))
                    {
                        item.Parent = null;
                    }
                }
            }
        }

        #endregion

    }
}

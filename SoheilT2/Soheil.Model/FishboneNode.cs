//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class FishboneNode
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual byte Type
        {
            get { return _type; }
            set { _type = value; }
        }
        private byte _type = 1;
    
        public virtual byte RootType
        {
            get { return _rootType; }
            set { _rootType = value; }
        }
        private byte _rootType = 1;
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Root Root
        {
            get { return _root; }
            set
            {
                if (!ReferenceEquals(_root, value))
                {
                    var previousValue = _root;
                    _root = value;
                    FixupRoot(previousValue);
                }
            }
        }
        private Root _root;
    
        public virtual DefectionReport DefectionReport
        {
            get { return _defectionReport; }
            set
            {
                if (!ReferenceEquals(_defectionReport, value))
                {
                    var previousValue = _defectionReport;
                    _defectionReport = value;
                    FixupDefectionReport(previousValue);
                }
            }
        }
        private DefectionReport _defectionReport;
    
        public virtual ICollection<FishboneNode> Children
        {
            get
            {
                if (_children == null)
                {
                    var newCollection = new FixupCollection<FishboneNode>();
                    newCollection.CollectionChanged += FixupChildren;
                    _children = newCollection;
                }
                return _children;
            }
            set
            {
                if (!ReferenceEquals(_children, value))
                {
                    var previousValue = _children as FixupCollection<FishboneNode>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildren;
                    }
                    _children = value;
                    var newValue = value as FixupCollection<FishboneNode>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildren;
                    }
                }
            }
        }
        private ICollection<FishboneNode> _children;
    
        public virtual FishboneNode Parent
        {
            get { return _parent; }
            set
            {
                if (!ReferenceEquals(_parent, value))
                {
                    var previousValue = _parent;
                    _parent = value;
                    FixupParent(previousValue);
                }
            }
        }
        private FishboneNode _parent;
    
        public virtual ICollection<FishboneNode_ActionPlan> FishboneNode_ActionPlans
        {
            get
            {
                if (_fishboneNode_ActionPlans == null)
                {
                    var newCollection = new FixupCollection<FishboneNode_ActionPlan>();
                    newCollection.CollectionChanged += FixupFishboneNode_ActionPlans;
                    _fishboneNode_ActionPlans = newCollection;
                }
                return _fishboneNode_ActionPlans;
            }
            set
            {
                if (!ReferenceEquals(_fishboneNode_ActionPlans, value))
                {
                    var previousValue = _fishboneNode_ActionPlans as FixupCollection<FishboneNode_ActionPlan>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFishboneNode_ActionPlans;
                    }
                    _fishboneNode_ActionPlans = value;
                    var newValue = value as FixupCollection<FishboneNode_ActionPlan>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFishboneNode_ActionPlans;
                    }
                }
            }
        }
        private ICollection<FishboneNode_ActionPlan> _fishboneNode_ActionPlans;

        #endregion

        #region Association Fixup
    
        private void FixupRoot(Root previousValue)
        {
            if (previousValue != null && previousValue.FishboneNodes.Contains(this))
            {
                previousValue.FishboneNodes.Remove(this);
            }
    
            if (Root != null)
            {
                if (!Root.FishboneNodes.Contains(this))
                {
                    Root.FishboneNodes.Add(this);
                }
            }
        }
    
        private void FixupDefectionReport(DefectionReport previousValue)
        {
            if (previousValue != null && previousValue.FishboneNodes.Contains(this))
            {
                previousValue.FishboneNodes.Remove(this);
            }
    
            if (DefectionReport != null)
            {
                if (!DefectionReport.FishboneNodes.Contains(this))
                {
                    DefectionReport.FishboneNodes.Add(this);
                }
            }
        }
    
        private void FixupParent(FishboneNode previousValue)
        {
            if (previousValue != null && previousValue.Children.Contains(this))
            {
                previousValue.Children.Remove(this);
            }
    
            if (Parent != null)
            {
                if (!Parent.Children.Contains(this))
                {
                    Parent.Children.Add(this);
                }
            }
        }
    
        private void FixupChildren(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (FishboneNode item in e.NewItems)
                {
                    item.Parent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FishboneNode item in e.OldItems)
                {
                    if (ReferenceEquals(item.Parent, this))
                    {
                        item.Parent = null;
                    }
                }
            }
        }
    
        private void FixupFishboneNode_ActionPlans(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (FishboneNode_ActionPlan item in e.NewItems)
                {
                    item.FishboneNode = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FishboneNode_ActionPlan item in e.OldItems)
                {
                    if (ReferenceEquals(item.FishboneNode, this))
                    {
                        item.FishboneNode = null;
                    }
                }
            }
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class Process
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual int TargetCount
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<ProcessOperator> ProcessOperators
        {
            get
            {
                if (_processOperators == null)
                {
                    var newCollection = new FixupCollection<ProcessOperator>();
                    newCollection.CollectionChanged += FixupProcessOperators;
                    _processOperators = newCollection;
                }
                return _processOperators;
            }
            set
            {
                if (!ReferenceEquals(_processOperators, value))
                {
                    var previousValue = _processOperators as FixupCollection<ProcessOperator>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProcessOperators;
                    }
                    _processOperators = value;
                    var newValue = value as FixupCollection<ProcessOperator>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProcessOperators;
                    }
                }
            }
        }
        private ICollection<ProcessOperator> _processOperators;
    
        public virtual ICollection<ProcessReport> ProcessReports
        {
            get
            {
                if (_processReports == null)
                {
                    var newCollection = new FixupCollection<ProcessReport>();
                    newCollection.CollectionChanged += FixupProcessReports;
                    _processReports = newCollection;
                }
                return _processReports;
            }
            set
            {
                if (!ReferenceEquals(_processReports, value))
                {
                    var previousValue = _processReports as FixupCollection<ProcessReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProcessReports;
                    }
                    _processReports = value;
                    var newValue = value as FixupCollection<ProcessReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProcessReports;
                    }
                }
            }
        }
        private ICollection<ProcessReport> _processReports;
    
        public virtual ICollection<SelectedMachine> SelectedMachines
        {
            get
            {
                if (_selectedMachines == null)
                {
                    var newCollection = new FixupCollection<SelectedMachine>();
                    newCollection.CollectionChanged += FixupSelectedMachines;
                    _selectedMachines = newCollection;
                }
                return _selectedMachines;
            }
            set
            {
                if (!ReferenceEquals(_selectedMachines, value))
                {
                    var previousValue = _selectedMachines as FixupCollection<SelectedMachine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSelectedMachines;
                    }
                    _selectedMachines = value;
                    var newValue = value as FixupCollection<SelectedMachine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSelectedMachines;
                    }
                }
            }
        }
        private ICollection<SelectedMachine> _selectedMachines;
    
        public virtual Task Task
        {
            get { return _task; }
            set
            {
                if (!ReferenceEquals(_task, value))
                {
                    var previousValue = _task;
                    _task = value;
                    FixupTask(previousValue);
                }
            }
        }
        private Task _task;
    
        public virtual StateStationActivity StateStationActivity
        {
            get { return _stateStationActivity; }
            set
            {
                if (!ReferenceEquals(_stateStationActivity, value))
                {
                    var previousValue = _stateStationActivity;
                    _stateStationActivity = value;
                    FixupStateStationActivity(previousValue);
                }
            }
        }
        private StateStationActivity _stateStationActivity;

        #endregion

        #region Association Fixup
    
        private void FixupTask(Task previousValue)
        {
            if (previousValue != null && previousValue.Processes.Contains(this))
            {
                previousValue.Processes.Remove(this);
            }
    
            if (Task != null)
            {
                if (!Task.Processes.Contains(this))
                {
                    Task.Processes.Add(this);
                }
            }
        }
    
        private void FixupStateStationActivity(StateStationActivity previousValue)
        {
            if (previousValue != null && previousValue.Processes.Contains(this))
            {
                previousValue.Processes.Remove(this);
            }
    
            if (StateStationActivity != null)
            {
                if (!StateStationActivity.Processes.Contains(this))
                {
                    StateStationActivity.Processes.Add(this);
                }
            }
        }
    
        private void FixupProcessOperators(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProcessOperator item in e.NewItems)
                {
                    item.Process = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProcessOperator item in e.OldItems)
                {
                    if (ReferenceEquals(item.Process, this))
                    {
                        item.Process = null;
                    }
                }
            }
        }
    
        private void FixupProcessReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProcessReport item in e.NewItems)
                {
                    item.Process = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProcessReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Process, this))
                    {
                        item.Process = null;
                    }
                }
            }
        }
    
        private void FixupSelectedMachines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SelectedMachine item in e.NewItems)
                {
                    item.Process = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SelectedMachine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Process, this))
                    {
                        item.Process = null;
                    }
                }
            }
        }

        #endregion

    }
}

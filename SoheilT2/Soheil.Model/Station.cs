//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class Station
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual byte Status
        {
            get;
            set;
        }
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }
    
        public virtual int Index
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Cost> Costs
        {
            get
            {
                if (_costs == null)
                {
                    var newCollection = new FixupCollection<Cost>();
                    newCollection.CollectionChanged += FixupCosts;
                    _costs = newCollection;
                }
                return _costs;
            }
            set
            {
                if (!ReferenceEquals(_costs, value))
                {
                    var previousValue = _costs as FixupCollection<Cost>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCosts;
                    }
                    _costs = value;
                    var newValue = value as FixupCollection<Cost>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCosts;
                    }
                }
            }
        }
        private ICollection<Cost> _costs;
    
        public virtual ICollection<Changeover> Changeovers
        {
            get
            {
                if (_changeovers == null)
                {
                    var newCollection = new FixupCollection<Changeover>();
                    newCollection.CollectionChanged += FixupChangeovers;
                    _changeovers = newCollection;
                }
                return _changeovers;
            }
            set
            {
                if (!ReferenceEquals(_changeovers, value))
                {
                    var previousValue = _changeovers as FixupCollection<Changeover>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChangeovers;
                    }
                    _changeovers = value;
                    var newValue = value as FixupCollection<Changeover>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChangeovers;
                    }
                }
            }
        }
        private ICollection<Changeover> _changeovers;
    
        public virtual ICollection<Warmup> Warmups
        {
            get
            {
                if (_warmups == null)
                {
                    var newCollection = new FixupCollection<Warmup>();
                    newCollection.CollectionChanged += FixupWarmups;
                    _warmups = newCollection;
                }
                return _warmups;
            }
            set
            {
                if (!ReferenceEquals(_warmups, value))
                {
                    var previousValue = _warmups as FixupCollection<Warmup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWarmups;
                    }
                    _warmups = value;
                    var newValue = value as FixupCollection<Warmup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWarmups;
                    }
                }
            }
        }
        private ICollection<Warmup> _warmups;
    
        public virtual ICollection<Test> Tests
        {
            get
            {
                if (_tests == null)
                {
                    var newCollection = new FixupCollection<Test>();
                    newCollection.CollectionChanged += FixupTests;
                    _tests = newCollection;
                }
                return _tests;
            }
            set
            {
                if (!ReferenceEquals(_tests, value))
                {
                    var previousValue = _tests as FixupCollection<Test>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTests;
                    }
                    _tests = value;
                    var newValue = value as FixupCollection<Test>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTests;
                    }
                }
            }
        }
        private ICollection<Test> _tests;
    
        public virtual ICollection<StationMachine> StationMachines
        {
            get
            {
                if (_stationMachines == null)
                {
                    var newCollection = new FixupCollection<StationMachine>();
                    newCollection.CollectionChanged += FixupStationMachines;
                    _stationMachines = newCollection;
                }
                return _stationMachines;
            }
            set
            {
                if (!ReferenceEquals(_stationMachines, value))
                {
                    var previousValue = _stationMachines as FixupCollection<StationMachine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStationMachines;
                    }
                    _stationMachines = value;
                    var newValue = value as FixupCollection<StationMachine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStationMachines;
                    }
                }
            }
        }
        private ICollection<StationMachine> _stationMachines;
    
        public virtual ICollection<StateStation> StateStations
        {
            get
            {
                if (_stateStations == null)
                {
                    var newCollection = new FixupCollection<StateStation>();
                    newCollection.CollectionChanged += FixupStateStations;
                    _stateStations = newCollection;
                }
                return _stateStations;
            }
            set
            {
                if (!ReferenceEquals(_stateStations, value))
                {
                    var previousValue = _stateStations as FixupCollection<StateStation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStateStations;
                    }
                    _stateStations = value;
                    var newValue = value as FixupCollection<StateStation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStateStations;
                    }
                }
            }
        }
        private ICollection<StateStation> _stateStations;

        #endregion

        #region Association Fixup
    
        private void FixupCosts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Cost item in e.NewItems)
                {
                    item.Station = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Cost item in e.OldItems)
                {
                    if (ReferenceEquals(item.Station, this))
                    {
                        item.Station = null;
                    }
                }
            }
        }
    
        private void FixupChangeovers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Changeover item in e.NewItems)
                {
                    item.Station = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Changeover item in e.OldItems)
                {
                    if (ReferenceEquals(item.Station, this))
                    {
                        item.Station = null;
                    }
                }
            }
        }
    
        private void FixupWarmups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Warmup item in e.NewItems)
                {
                    item.Station = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Warmup item in e.OldItems)
                {
                    if (ReferenceEquals(item.Station, this))
                    {
                        item.Station = null;
                    }
                }
            }
        }
    
        private void FixupTests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Test item in e.NewItems)
                {
                    item.Station = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Test item in e.OldItems)
                {
                    if (ReferenceEquals(item.Station, this))
                    {
                        item.Station = null;
                    }
                }
            }
        }
    
        private void FixupStationMachines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StationMachine item in e.NewItems)
                {
                    item.Station = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StationMachine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Station, this))
                    {
                        item.Station = null;
                    }
                }
            }
        }
    
        private void FixupStateStations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StateStation item in e.NewItems)
                {
                    item.Station = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StateStation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Station, this))
                    {
                        item.Station = null;
                    }
                }
            }
        }

        #endregion

    }
}

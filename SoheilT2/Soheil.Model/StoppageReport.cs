//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class StoppageReport
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual int LostCount
        {
            get;
            set;
        }
    
        public virtual int LostTime
        {
            get;
            set;
        }
    
        public virtual int ModifiedBy
        {
            get;
            set;
        }
    
        public virtual bool AffectsTaskReport
        {
            get { return _affectsTaskReport; }
            set { _affectsTaskReport = value; }
        }
        private bool _affectsTaskReport = false;

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<OperatorStoppageReport> OperatorStoppageReports
        {
            get
            {
                if (_operatorStoppageReports == null)
                {
                    var newCollection = new FixupCollection<OperatorStoppageReport>();
                    newCollection.CollectionChanged += FixupOperatorStoppageReports;
                    _operatorStoppageReports = newCollection;
                }
                return _operatorStoppageReports;
            }
            set
            {
                if (!ReferenceEquals(_operatorStoppageReports, value))
                {
                    var previousValue = _operatorStoppageReports as FixupCollection<OperatorStoppageReport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOperatorStoppageReports;
                    }
                    _operatorStoppageReports = value;
                    var newValue = value as FixupCollection<OperatorStoppageReport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOperatorStoppageReports;
                    }
                }
            }
        }
        private ICollection<OperatorStoppageReport> _operatorStoppageReports;
    
        public virtual ProcessReport ProcessReport
        {
            get { return _processReport; }
            set
            {
                if (!ReferenceEquals(_processReport, value))
                {
                    var previousValue = _processReport;
                    _processReport = value;
                    FixupProcessReport(previousValue);
                }
            }
        }
        private ProcessReport _processReport;
    
        public virtual Cause Cause
        {
            get { return _cause; }
            set
            {
                if (!ReferenceEquals(_cause, value))
                {
                    var previousValue = _cause;
                    _cause = value;
                    FixupCause(previousValue);
                }
            }
        }
        private Cause _cause;

        #endregion

        #region Association Fixup
    
        private void FixupProcessReport(ProcessReport previousValue)
        {
            if (previousValue != null && previousValue.StoppageReports.Contains(this))
            {
                previousValue.StoppageReports.Remove(this);
            }
    
            if (ProcessReport != null)
            {
                if (!ProcessReport.StoppageReports.Contains(this))
                {
                    ProcessReport.StoppageReports.Add(this);
                }
            }
        }
    
        private void FixupCause(Cause previousValue)
        {
            if (previousValue != null && previousValue.StoppageReports.Contains(this))
            {
                previousValue.StoppageReports.Remove(this);
            }
    
            if (Cause != null)
            {
                if (!Cause.StoppageReports.Contains(this))
                {
                    Cause.StoppageReports.Add(this);
                }
            }
        }
    
        private void FixupOperatorStoppageReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OperatorStoppageReport item in e.NewItems)
                {
                    item.StoppageReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OperatorStoppageReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.StoppageReport, this))
                    {
                        item.StoppageReport = null;
                    }
                }
            }
        }

        #endregion

    }
}

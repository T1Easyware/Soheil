//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class Setup : NonProductiveTask
    {
        #region Navigation Properties
    
        public virtual Changeover Changeover
        {
            get { return _changeover; }
            set
            {
                if (!ReferenceEquals(_changeover, value))
                {
                    var previousValue = _changeover;
                    _changeover = value;
                    FixupChangeover(previousValue);
                }
            }
        }
        private Changeover _changeover;
    
        public virtual Warmup Warmup
        {
            get { return _warmup; }
            set
            {
                if (!ReferenceEquals(_warmup, value))
                {
                    var previousValue = _warmup;
                    _warmup = value;
                    FixupWarmup(previousValue);
                }
            }
        }
        private Warmup _warmup;

        #endregion

        #region Association Fixup
    
        private void FixupChangeover(Changeover previousValue)
        {
            if (previousValue != null && previousValue.Setups.Contains(this))
            {
                previousValue.Setups.Remove(this);
            }
    
            if (Changeover != null)
            {
                if (!Changeover.Setups.Contains(this))
                {
                    Changeover.Setups.Add(this);
                }
            }
        }
    
        private void FixupWarmup(Warmup previousValue)
        {
            if (previousValue != null && previousValue.Setups.Contains(this))
            {
                previousValue.Setups.Remove(this);
            }
    
            if (Warmup != null)
            {
                if (!Warmup.Setups.Contains(this))
                {
                    Warmup.Setups.Add(this);
                }
            }
        }

        #endregion

    }
}

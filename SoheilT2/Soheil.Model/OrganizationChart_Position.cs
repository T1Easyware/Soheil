//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Soheil.Model
{
    public partial class OrganizationChart_Position
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Position Position
        {
            get { return _position; }
            set
            {
                if (!ReferenceEquals(_position, value))
                {
                    var previousValue = _position;
                    _position = value;
                    FixupPosition(previousValue);
                }
            }
        }
        private Position _position;
    
        public virtual OrganizationChart OrganizationChart
        {
            get { return _organizationChart; }
            set
            {
                if (!ReferenceEquals(_organizationChart, value))
                {
                    var previousValue = _organizationChart;
                    _organizationChart = value;
                    FixupOrganizationChart(previousValue);
                }
            }
        }
        private OrganizationChart _organizationChart;
    
        public virtual ICollection<OrganizationChart_Position> Children
        {
            get
            {
                if (_children == null)
                {
                    var newCollection = new FixupCollection<OrganizationChart_Position>();
                    newCollection.CollectionChanged += FixupChildren;
                    _children = newCollection;
                }
                return _children;
            }
            set
            {
                if (!ReferenceEquals(_children, value))
                {
                    var previousValue = _children as FixupCollection<OrganizationChart_Position>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildren;
                    }
                    _children = value;
                    var newValue = value as FixupCollection<OrganizationChart_Position>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildren;
                    }
                }
            }
        }
        private ICollection<OrganizationChart_Position> _children;
    
        public virtual OrganizationChart_Position Parent
        {
            get { return _parent; }
            set
            {
                if (!ReferenceEquals(_parent, value))
                {
                    var previousValue = _parent;
                    _parent = value;
                    FixupParent(previousValue);
                }
            }
        }
        private OrganizationChart_Position _parent;

        #endregion

        #region Association Fixup
    
        private void FixupPosition(Position previousValue)
        {
            if (previousValue != null && previousValue.OrganizationChart_Positions.Contains(this))
            {
                previousValue.OrganizationChart_Positions.Remove(this);
            }
    
            if (Position != null)
            {
                if (!Position.OrganizationChart_Positions.Contains(this))
                {
                    Position.OrganizationChart_Positions.Add(this);
                }
            }
        }
    
        private void FixupOrganizationChart(OrganizationChart previousValue)
        {
            if (previousValue != null && previousValue.OrganizationChart_Positions.Contains(this))
            {
                previousValue.OrganizationChart_Positions.Remove(this);
            }
    
            if (OrganizationChart != null)
            {
                if (!OrganizationChart.OrganizationChart_Positions.Contains(this))
                {
                    OrganizationChart.OrganizationChart_Positions.Add(this);
                }
            }
        }
    
        private void FixupParent(OrganizationChart_Position previousValue)
        {
            if (previousValue != null && previousValue.Children.Contains(this))
            {
                previousValue.Children.Remove(this);
            }
    
            if (Parent != null)
            {
                if (!Parent.Children.Contains(this))
                {
                    Parent.Children.Add(this);
                }
            }
        }
    
        private void FixupChildren(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OrganizationChart_Position item in e.NewItems)
                {
                    item.Parent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrganizationChart_Position item in e.OldItems)
                {
                    if (ReferenceEquals(item.Parent, this))
                    {
                        item.Parent = null;
                    }
                }
            }
        }

        #endregion

    }
}
